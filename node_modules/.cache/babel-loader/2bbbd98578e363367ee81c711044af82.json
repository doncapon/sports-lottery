{"ast":null,"code":"import moment from 'moment';\nexport const getNextPlayDate = (daysOffset, hoursToGo) => {\n  const i = 6;\n  const d = new Date();\n  d.setTime(d.getTime() + hoursToGo * 60 * 60 * 1000); //next saturday\n\n  d.setDate(d.getDate() + (i + 7 - d.getDay()) % 7);\n  d.setDate(d.getDate() + daysOffset);\n  return moment(d).format(\"YYYY-MM-DD\");\n};\nexport const uuid = () => {\n  let d = moment(Date.now()).format(\"SSSSS-MMssDD-HHYYYYmm\");\n  let str = Math.floor(Math.random() * 10000);\n  d += \"-\" + str;\n  return d;\n};\nexport const addCommaToAmounts = nStr => {\n  nStr += '';\n  const x = nStr.split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? '.' + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1,$2');\n  }\n\n  let num = x1 + x2;\n  if (num.includes(\".\")) num = num.substr(0, num.indexOf(\".\") + 3);\n\n  if (num.includes(\".\") && num.substr(num.indexOf('.') + 1, num.length).length === 1) {\n    num += \"0\";\n  }\n\n  return num;\n};\nexport const calculateAge = dob1 => {\n  const today = new Date();\n  const birthDate = new Date(dob1 + \"T00:00:00Z\"); // create a date object directly from `dob1` argument\n\n  let age_now = today.getFullYear() - birthDate.getFullYear();\n  const m = today.getMonth() - birthDate.getMonth();\n\n  if (m < 0 || m === 0 && today.getDate() < birthDate.getDate()) {\n    age_now--;\n  }\n\n  return age_now;\n};\nexport const dateInYYYYMMDD = date => {\n  let y = date.split(\"-\");\n  let q;\n\n  if (y[2].length > 2) {\n    q = y[2] + \"-\" + y[1] + \"-\" + y[0];\n    return q;\n  }\n\n  return date;\n};\nexport const capitalizeFirstLetter = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/shared/utility.js"],"names":["moment","getNextPlayDate","daysOffset","hoursToGo","i","d","Date","setTime","getTime","setDate","getDate","getDay","format","uuid","now","str","Math","floor","random","addCommaToAmounts","nStr","x","split","x1","x2","length","rgx","test","replace","num","includes","substr","indexOf","calculateAge","dob1","today","birthDate","age_now","getFullYear","m","getMonth","dateInYYYYMMDD","date","y","q","capitalizeFirstLetter","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import moment from 'moment'\r\nexport const getNextPlayDate = (daysOffset, hoursToGo) => {\r\n  const i = 6;\r\n  const d = new Date();\r\n  d.setTime(d.getTime() + (hoursToGo * 60 * 60 * 1000));\r\n  //next saturday\r\n  d.setDate(d.getDate() + (i + 7 - d.getDay()) % 7);\r\n  d.setDate(d.getDate() + daysOffset);\r\n  return moment(d).format(\"YYYY-MM-DD\");\r\n}\r\n\r\n\r\nexport  const uuid =() => {\r\n  let d = moment(Date.now()).format(\"SSSSS-MMssDD-HHYYYYmm\");\r\n  let str = Math.floor(Math.random() * 10000);\r\n  d += \"-\" + str\r\n  return d;\r\n}\r\n\r\nexport const  addCommaToAmounts=(nStr)=> {\r\n  nStr += '';\r\n  const x = nStr.split('.');\r\n  let x1 = x[0];\r\n  const x2 = x.length > 1 ? '.' + x[1] : '';\r\n  const rgx = /(\\d+)(\\d{3})/;\r\n  while (rgx.test(x1)) {\r\n    x1 = x1.replace(rgx, '$1,$2');\r\n  }\r\n  let num = x1 + x2;\r\n  if (num.includes(\".\"))\r\n    num = num.substr(0, num.indexOf(\".\") + 3)\r\n  if (num.includes(\".\") && num.substr(num.indexOf('.') + 1, num.length).length === 1) {\r\n    num += \"0\";\r\n  }\r\n  return (num);\r\n}\r\nexport const calculateAge = (dob1) => {\r\n  const today = new Date();\r\n  const birthDate = new Date(dob1 + \"T00:00:00Z\");  // create a date object directly from `dob1` argument\r\n  let age_now = today.getFullYear() - birthDate.getFullYear();\r\n  const m = today.getMonth() - birthDate.getMonth();\r\n  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n    age_now--;\r\n  }\r\n  return age_now;\r\n}\r\n\r\nexport const dateInYYYYMMDD = (date) => {\r\n  let y = date.split(\"-\");\r\n  let q;\r\n  if (y[2].length > 2) {\r\n    q = y[2] + \"-\" + y[1] + \"-\" + y[0];\r\n    return q;\r\n  }\r\n  return date;\r\n}\r\n\r\nexport const capitalizeFirstLetter = (str) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
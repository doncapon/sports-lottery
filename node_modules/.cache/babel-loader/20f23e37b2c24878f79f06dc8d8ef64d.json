{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport firebase from '../../config/firebase/firebase';\nexport const setIsLoggedIn = isLoggedIn => {\n  return {\n    type: actionTypes.SET_IS_LOGGED_IN,\n    isLoggedIn: isLoggedIn\n  };\n};\nexport const login2 = () => {\n  return {\n    type: actionTypes.LOGIN\n  };\n};\nexport const setFunds = funds => {\n  return {\n    type: actionTypes.SET_FUNDS,\n    funds: funds\n  };\n};\nexport const setForgot = forgot => {\n  return {\n    type: actionTypes.SET_FORGOT_PASSWORD,\n    forgotPassword: forgot\n  };\n};\nexport const logout2 = () => {\n  return {\n    type: actionTypes.LOGOUT\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    firebase.auth().signOut().then(() => {\n      dispatch(logout2());\n      dispatch(setLoggedInUser({}));\n      dispatch(setIsLoggedIn(false));\n    });\n  };\n};\nexport const login = (email, password) => {\n  return dispatch => {\n    dispatch(login2());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(userCredential => {\n      // Signed in\n      var user = userCredential.user;\n\n      if (user.emailVerified === true) {\n        let userRef = firebase.database().ref(\"users/\" + user.uid);\n        userRef.on('value', snapshot => {\n          const dbUser = snapshot.val();\n          dispatch(setLoggedInUser(user));\n          dispatch(setIsLoggedIn(true));\n          dispatch(setLoggedInUser(dbUser));\n          firebase.database().ref(\"users\").off();\n        });\n        return function cleanup() {\n          userRef.off();\n        };\n      }\n    }).catch(error => {\n      setLoggedInUser(error);\n      dispatch(setForgot(true));\n      dispatch(setIsLoggedIn(false));\n      dispatch(logout2());\n    });\n    firebase.database().ref(\"users\").off();\n  };\n};\nexport const setLoggedInUser = user => {\n  return {\n    type: actionTypes.SET_LOGGEDIN_USER,\n    user: user\n  };\n};","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/store/actions/login.js"],"names":["actionTypes","firebase","setIsLoggedIn","isLoggedIn","type","SET_IS_LOGGED_IN","login2","LOGIN","setFunds","funds","SET_FUNDS","setForgot","forgot","SET_FORGOT_PASSWORD","forgotPassword","logout2","LOGOUT","logout","dispatch","auth","signOut","then","setLoggedInUser","login","email","password","signInWithEmailAndPassword","userCredential","user","emailVerified","userRef","database","ref","uid","on","snapshot","dbUser","val","off","cleanup","catch","error","SET_LOGGEDIN_USER"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport firebase from '../../config/firebase/firebase';\r\n\r\nexport const setIsLoggedIn = (isLoggedIn) => {\r\n    return {\r\n        type: actionTypes.SET_IS_LOGGED_IN,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\nexport const login2 = () => {\r\n    return {\r\n        type: actionTypes.LOGIN,\r\n    }\r\n}\r\nexport const setFunds = (funds) => {\r\n    return {\r\n        type: actionTypes.SET_FUNDS,\r\n        funds: funds\r\n    }\r\n}\r\nexport const setForgot = (forgot) => {\r\n    return {\r\n        type: actionTypes.SET_FORGOT_PASSWORD,\r\n        forgotPassword: forgot\r\n    }\r\n\r\n}\r\nexport const logout2 = () => {\r\n    return {\r\n        type: actionTypes.LOGOUT,\r\n    }\r\n\r\n}\r\nexport const logout = () => {\r\n    return dispatch => {\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch(logout2());\r\n            dispatch(setLoggedInUser({}));\r\n            dispatch(setIsLoggedIn(false));\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const login = (email, password) => {\r\n    return dispatch => {\r\n        dispatch(login2());\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                // Signed in\r\n                var user = userCredential.user;\r\n                if (user.emailVerified===true) {\r\n                    let userRef = firebase.database().ref(\"users/\" + user.uid);\r\n                    userRef.on('value', (snapshot) => {\r\n                        const dbUser = snapshot.val();\r\n                        dispatch(setLoggedInUser(user));\r\n                        dispatch(setIsLoggedIn(true));\r\n                        dispatch(setLoggedInUser(dbUser));\r\n                        firebase.database().ref(\"users\").off();\r\n\r\n                    });\r\n                    return function cleanup() {\r\n                        userRef.off();\r\n                    }\r\n                    \r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                setLoggedInUser(error);\r\n                dispatch(setForgot(true));\r\n                dispatch(setIsLoggedIn(false));\r\n                dispatch(logout2())\r\n            });\r\n            firebase.database().ref(\"users\").off();\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const setLoggedInUser = (user) => {\r\n    return {\r\n        type: actionTypes.SET_LOGGEDIN_USER,\r\n        user: user\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
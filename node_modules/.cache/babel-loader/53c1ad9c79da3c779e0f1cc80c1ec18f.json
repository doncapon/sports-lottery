{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Emma\\\\Documents\\\\GitHub\\\\Emp\\\\sports-lottery\\\\src\\\\components\\\\Payments\\\\ToWallet\\\\ToWallet.js\";\nimport React, { Component } from \"react\";\nimport './ToWallet.module.css';\nimport { PaystackButton } from 'react-paystack';\nimport classes from \"./ToWallet.module.css\";\nimport firebase from '../../../config/firebase/firebase';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\n\nclass ToWallet extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeEmail = e => {\n      e.preventDefault();\n      let {\n        name,\n        value\n      } = e.target;\n      this.handleFormValidationEmail(value);\n      this.setState({\n        [name]: value,\n        isTouched: true\n      });\n    };\n\n    this.handleChangeAmount = e => {\n      e.preventDefault();\n      let {\n        name,\n        value\n      } = e.target;\n      this.handleFormValidationAmount(value);\n      this.setState({\n        [name]: value,\n        isTouched: true\n      });\n    };\n\n    this.handlePaystackSuccessAction = reference => {\n      let userId = firebase.auth().currentUser.uid;\n      let userRef = firebase.database().ref(\"users\").child(userId);\n      userRef.child('funds').transaction(funds => {\n        this.props.onSetFunds(funds + Number(this.state.amount));\n        return funds + Number(this.state.amount);\n      });\n      firebase.database().ref(\"users\").off();\n    };\n\n    this.handlePaystackCloseAction = () => {\n      // implementation for  whatever you want to do when the Paystack dialog closed.\n      console.log('closed');\n    };\n\n    this.QuickPayHandler = e => {\n      this.setState({\n        amount: e.target.innerHTML.split(\" \")[1]\n      });\n      this.handleFormValidationAmount(e.target.innerHTML.split(\" \")[1]);\n    };\n\n    this.state = {\n      emailId: '',\n      amount: '',\n      emailError: '',\n      amountErr: '',\n      config: {},\n      isTouched: false,\n      loading: false\n    };\n    this.initialState = this.state;\n  }\n\n  handleFormValidationEmail(emailId) {\n    let emailError = '';\n    let formIsValid = true; //Email    \n\n    if (!emailId) {\n      formIsValid = false;\n      emailError = \"Email id is required.\";\n    } else if (!/^[ ]*([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})[ ]*$/i.test(emailId)) {\n      formIsValid = false;\n      emailError = \"Invalid email id.\";\n    }\n\n    this.setState({\n      emailError: emailError\n    });\n    return formIsValid;\n  }\n\n  handleFormValidationAmount(amount) {\n    let amountErr = '';\n    let formIsValid = true; //Amount\n\n    if (!amount) {\n      formIsValid = false;\n      amountErr = \"Amount is required.\";\n    } else {\n      if (amount < 500) {\n        formIsValid = false;\n        amountErr = \"Minimum amount is 500 Naira\";\n      }\n\n      if (amount > 50000 && formIsValid) {\n        formIsValid = false;\n        amountErr = \"Maximum amount is 50000 Naira\";\n      }\n\n      if (amount % 1 !== 0 && formIsValid) {\n        amountErr = \"No decimals allowed, remove dot(.)\";\n      }\n    }\n\n    this.setState({\n      amountErr: amountErr\n    });\n    return formIsValid;\n  }\n\n  render() {\n    const emailIdErr = this.state.emailError;\n    const amountErr = this.state.amountErr;\n    const reference = '' + Math.floor(Math.random() * 1000000000 + 1);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"emailId\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"emailId\",\n            value: this.state.emailId,\n            onChange: this.handleChangeEmail,\n            placeholder: \"Email Address\",\n            className: classes.Text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), emailIdErr && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.Error,\n            style: {\n              color: \"red\"\n            },\n            children: emailIdErr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.QuickButtons,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.TransferText,\n            children: \"Amount option:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: e => this.QuickPayHandler(e),\n            className: classes.Quick,\n            children: \"\\u20A6 500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: e => this.QuickPayHandler(e),\n            className: classes.Quick,\n            children: \"\\u20A6 1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: e => this.QuickPayHandler(e),\n            className: classes.Quick,\n            children: \"\\u20A6 5000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"amount\",\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"amount\",\n            onChange: this.handleChangeAmount,\n            value: this.state.amount,\n            placeholder: \"Amount: 500 - 50000 \",\n            className: classes.Number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), amountErr && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.Error,\n            style: {\n              color: \"red\"\n            },\n            children: amountErr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), !emailIdErr && !amountErr && this.state.emailId && this.state.amount ? /*#__PURE__*/_jsxDEV(PaystackButton, {\n        className: classes.Button,\n        reference: reference,\n        email: this.state.emailId,\n        amount: this.state.amount * 100,\n        publicKey: process.env.REACT_APP_PAYSTACT_PUBLIC_KEY,\n        text: 'Pay Here',\n        onSuccess: () => this.handlePaystackSuccessAction(reference),\n        onClose: this.handlePaystackCloseAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetFunds: funds => dispatch(actions.setFunds(funds))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ToWallet);","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/components/Payments/ToWallet/ToWallet.js"],"names":["React","Component","PaystackButton","classes","firebase","connect","actions","ToWallet","constructor","props","handleChangeEmail","e","preventDefault","name","value","target","handleFormValidationEmail","setState","isTouched","handleChangeAmount","handleFormValidationAmount","handlePaystackSuccessAction","reference","userId","auth","currentUser","uid","userRef","database","ref","child","transaction","funds","onSetFunds","Number","state","amount","off","handlePaystackCloseAction","console","log","QuickPayHandler","innerHTML","split","emailId","emailError","amountErr","config","loading","initialState","formIsValid","test","render","emailIdErr","Math","floor","random","label","Text","Error","color","QuickButtons","TransferText","Quick","Button","process","env","REACT_APP_PAYSTACT_PUBLIC_KEY","mapDispatchToProps","dispatch","setFunds"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport './ToWallet.module.css'\r\nimport { PaystackButton } from 'react-paystack';\r\nimport classes from \"./ToWallet.module.css\";\r\nimport firebase from '../../../config/firebase/firebase';\r\nimport { connect} from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\nclass ToWallet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emailId: '',\r\n            amount: '',\r\n            emailError: '',\r\n            amountErr: '',\r\n            config: {},\r\n            isTouched: false,\r\n            loading: false\r\n        };\r\n\r\n        this.initialState = this.state;\r\n    }\r\n\r\n    handleFormValidationEmail(emailId) {\r\n\r\n        let emailError = '';\r\n        let formIsValid = true;\r\n\r\n        //Email    \r\n        if (!emailId) {\r\n            formIsValid = false;\r\n            emailError = \"Email id is required.\";\r\n        }\r\n        else if (!(/^[ ]*([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})[ ]*$/i.test(emailId))) {\r\n\r\n            formIsValid = false;\r\n            emailError = \"Invalid email id.\";\r\n        }\r\n\r\n        this.setState({ emailError: emailError });\r\n        return formIsValid;\r\n    }\r\n    handleFormValidationAmount(amount) {\r\n        let amountErr = '';\r\n        let formIsValid = true;\r\n\r\n\r\n        //Amount\r\n        if (!amount) {\r\n            formIsValid = false;\r\n            amountErr = \"Amount is required.\";\r\n        }\r\n        else {\r\n            if (amount < 500) {\r\n                formIsValid = false;\r\n                amountErr = \"Minimum amount is 500 Naira\";\r\n            }\r\n            if (amount > 50000 && formIsValid) {\r\n                formIsValid = false;\r\n                amountErr = \"Maximum amount is 50000 Naira\";\r\n            }\r\n            if (amount % 1 !== 0 && formIsValid) {\r\n                amountErr = \"No decimals allowed, remove dot(.)\";\r\n\r\n            }\r\n        }\r\n        this.setState({ amountErr: amountErr });\r\n        return formIsValid;\r\n    }\r\n\r\n    handleChangeEmail = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { name, value } = e.target;\r\n        this.handleFormValidationEmail(value)\r\n\r\n        this.setState({ [name]: value, isTouched: true });\r\n    }\r\n    handleChangeAmount = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { name, value } = e.target;\r\n        this.handleFormValidationAmount(value)\r\n        this.setState({ [name]: value, isTouched: true });\r\n\r\n    }\r\n\r\n    handlePaystackSuccessAction = (reference) => {\r\n        let userId = firebase.auth().currentUser.uid;\r\n        let userRef = firebase.database().ref(\"users\").child(userId);\r\n        userRef.child('funds').transaction((funds)=> {\r\n            this.props.onSetFunds(funds+ Number(this.state.amount))\r\n            return funds+ Number(this.state.amount)\r\n        })\r\n        firebase.database().ref(\"users\").off();\r\n        \r\n    };\r\n\r\n    handlePaystackCloseAction = () => {\r\n        // implementation for  whatever you want to do when the Paystack dialog closed.\r\n        console.log('closed')\r\n    }\r\n    QuickPayHandler = (e) => {\r\n        this.setState({ amount: e.target.innerHTML.split(\" \")[1] })\r\n        this.handleFormValidationAmount(e.target.innerHTML.split(\" \")[1])\r\n    }\r\n    render() {\r\n\r\n        const emailIdErr = this.state.emailError;\r\n        const amountErr = this.state.amountErr;\r\n        const reference = '' + Math.floor((Math.random() * 1000000000) + 1);\r\n        return (\r\n            <div className=\"formDiv\">\r\n                <form>\r\n                    <div>\r\n                        <label className={classes.label} htmlFor=\"emailId\">Email</label>\r\n                        <input type=\"text\" name=\"emailId\"\r\n                            value={this.state.emailId}\r\n                            onChange={this.handleChangeEmail}\r\n                            placeholder=\"Email Address\"\r\n                            className={classes.Text} />\r\n                        {emailIdErr &&\r\n                            <div className={classes.Error} style={{ color: \"red\" }}>{emailIdErr}</div>\r\n                        }\r\n\r\n                    </div>\r\n                    <div className={classes.QuickButtons}>\r\n                        <div className={classes.TransferText}>Amount option:</div>\r\n                        <button type=\"button\" onClick={(e) => this.QuickPayHandler(e)} className={classes.Quick}>₦ 500</button>\r\n                        <button type=\"button\" onClick={(e) => this.QuickPayHandler(e)} className={classes.Quick}>₦ 1000</button>\r\n                        <button type=\"button\" onClick={(e) => this.QuickPayHandler(e)} className={classes.Quick}>₦ 5000</button>\r\n                    </div>\r\n                    <div>\r\n                        <label className={classes.label} htmlFor=\"amount\">Amount</label>\r\n                        <input type=\"number\" name=\"amount\"\r\n                            onChange={this.handleChangeAmount}\r\n                            value={this.state.amount}\r\n                            placeholder=\"Amount: 500 - 50000 \"\r\n                            className={classes.Number} />\r\n                        {amountErr &&\r\n                            <div className={classes.Error} style={{ color: \"red\" }}>{amountErr}</div>\r\n                        }\r\n                    </div>\r\n\r\n                </form>\r\n                {!emailIdErr && !amountErr && this.state.emailId && this.state.amount ?\r\n                    <PaystackButton className={classes.Button}\r\n                        reference={reference}\r\n                        email={this.state.emailId}\r\n                        amount={this.state.amount * 100}\r\n                        publicKey={process.env.REACT_APP_PAYSTACT_PUBLIC_KEY}\r\n                        text={'Pay Here'}\r\n                        onSuccess={() => this.handlePaystackSuccessAction(reference)}\r\n                        onClose={this.handlePaystackCloseAction} />\r\n                    : null}\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      onSetFunds: (funds) => dispatch(actions.setFunds(funds))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(ToWallet);"]},"metadata":{},"sourceType":"module"}
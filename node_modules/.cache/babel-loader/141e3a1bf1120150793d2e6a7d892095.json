{"ast":null,"code":"import produce from 'immer';\nimport * as actionTypes from '../actions/actionTypes';\nimport _ from 'lodash';\nconst initialStte = {\n  predictions: [],\n  loading: false\n};\n\nconst fetchPredictionsAll = (state, action) => {\n  return produce(state, draft => {\n    let newPredition = {\n      gameIndex: action.gameIndex\n    };\n    newPredition.prediction = _.cloneDeep(action.payLoad);\n    newPredition.isLoaded = true;\n\n    if (draft.predictions.length <= 0 || draft.predictions === null) {\n      draft.predictions = Object.assign([], [newPredition]);\n    } else {\n      draft.predictions.push(newPredition);\n    }\n  });\n};\n\nconst reducer = (state = initialStte, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_PREDICTIONS_ALL:\n      return fetchPredictionsAll(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/store/reducers/prediction.js"],"names":["produce","actionTypes","_","initialStte","predictions","loading","fetchPredictionsAll","state","action","draft","newPredition","gameIndex","prediction","cloneDeep","payLoad","isLoaded","length","Object","assign","push","reducer","type","FETCH_PREDICTIONS_ALL"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,WAAW,EAAG,EADE;AAEhBC,EAAAA,OAAO,EAAE;AAFO,CAApB;;AAKA,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAC1C,SAAOR,OAAO,CAAEO,KAAF,EAASE,KAAK,IAAG;AAC3B,QAAIC,YAAY,GAAG;AAACC,MAAAA,SAAS,EAAEH,MAAM,CAACG;AAAnB,KAAnB;AACID,IAAAA,YAAY,CAACE,UAAb,GAA0BV,CAAC,CAACW,SAAF,CAAYL,MAAM,CAACM,OAAnB,CAA1B;AACAJ,IAAAA,YAAY,CAACK,QAAb,GAAwB,IAAxB;;AAEA,QAAGN,KAAK,CAACL,WAAN,CAAkBY,MAAlB,IAA4B,CAA5B,IAAiCP,KAAK,CAACL,WAAN,KAAsB,IAA1D,EAA+D;AAC3DK,MAAAA,KAAK,CAACL,WAAN,GAAoBa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,CAACR,YAAD,CAAlB,CAApB;AACH,KAFD,MAGI;AACAD,MAAAA,KAAK,CAACL,WAAN,CAAkBe,IAAlB,CAAwBT,YAAxB;AACH;AAER,GAZa,CAAd;AAaH,CAdD;;AAgBA,MAAMU,OAAO,GAAG,CAACb,KAAK,GAAGJ,WAAT,EAAsBK,MAAtB,KAAgC;AAC5C,UAAOA,MAAM,CAACa,IAAd;AACI,SAAKpB,WAAW,CAACqB,qBAAjB;AACI,aAAOhB,mBAAmB,CAACC,KAAD,EAAQC,MAAR,CAA1B;;AACJ;AACA,aAAOD,KAAP;AAJJ;AAMH,CAPD;;AASA,eAAea,OAAf","sourcesContent":["import produce from 'immer';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport _ from 'lodash';\r\n\r\nconst initialStte = {\r\n    predictions : [],\r\n    loading: false,\r\n}\r\n\r\nconst fetchPredictionsAll = (state, action) =>{\r\n    return produce (state, draft =>{\r\n        let newPredition = {gameIndex: action.gameIndex}\r\n            newPredition.prediction = _.cloneDeep(action.payLoad);\r\n            newPredition.isLoaded = true;\r\n\r\n            if(draft.predictions.length <= 0 || draft.predictions === null){\r\n                draft.predictions = Object.assign([], [newPredition]);\r\n            }\r\n            else{\r\n                draft.predictions.push( newPredition)\r\n            }\r\n\r\n    });\r\n}\r\n\r\nconst reducer = (state = initialStte, action) =>{\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_PREDICTIONS_ALL:\r\n            return fetchPredictionsAll(state, action);\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}
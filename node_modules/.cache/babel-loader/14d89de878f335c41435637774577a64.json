{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport produce from \"immer\";\nconst initialState = {\n  user: {},\n  loading: false,\n  isLoggedIn: false,\n  forgotPassword: false\n};\n\nconst login = (state, action) => {\n  return produce(state, draft => {\n    draft.isLoggedIn = true;\n    draft.loading = true;\n  });\n};\n\nconst setFunds = (state, action) => {\n  return produce(state, draft => {\n    draft.user.funds = action.funds;\n  });\n};\n\nconst logout = (state, action) => {\n  return produce(state, draft => {\n    draft.isLoggedIn = false;\n    draft.loading = false;\n  });\n};\n\nconst setIsLoggedIn = (state, action) => {\n  return produce(state, draft => {\n    draft.isLoggedIn = action.isLoggedIn;\n  });\n};\n\nconst setLoggedInUser = (state, action) => {\n  return produce(state, draft => {\n    draft.user = action.user;\n  });\n};\n\nconst setForgot = (state, action) => {\n  return produce(state, draft => {\n    draft.forgotPassword = action.forgotPassword;\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_IS_LOGGED_IN:\n      return setIsLoggedIn(state, action);\n\n    case actionTypes.SET_LOGGEDIN_USER:\n      return setLoggedInUser(state, action);\n\n    case actionTypes.LOGIN:\n      return login(state, action);\n\n    case actionTypes.LOGOUT:\n      return logout(state, action);\n\n    case actionTypes.SET_FORGOT_PASSWORD:\n      return setForgot(state, action);\n\n    case actionTypes.SET_FUNDS:\n      return setFunds(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/store/reducers/login.js"],"names":["actionTypes","produce","initialState","user","loading","isLoggedIn","forgotPassword","login","state","action","draft","setFunds","funds","logout","setIsLoggedIn","setLoggedInUser","setForgot","reducer","type","SET_IS_LOGGED_IN","SET_LOGGEDIN_USER","LOGIN","LOGOUT","SET_FORGOT_PASSWORD","SET_FUNDS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,UAAU,EAAE,KAHK;AAIjBC,EAAAA,cAAc,EAAE;AAJC,CAArB;;AAOA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,SAAOR,OAAO,CAACO,KAAD,EAAQE,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACAK,IAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,GAHa,CAAd;AAIH,CALD;;AAOA,MAAMO,QAAQ,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAChC,SAAOR,OAAO,CAACO,KAAD,EAAQE,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACP,IAAN,CAAWS,KAAX,GAAmBH,MAAM,CAACG,KAA1B;AACH,GAFa,CAAd;AAGH,CAJD;;AAKA,MAAMC,MAAM,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC9B,SAAOR,OAAO,CAACO,KAAD,EAAQE,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACAK,IAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACH,GAHa,CAAd;AAIH,CALD;;AAOA,MAAMU,aAAa,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACrC,SAAOR,OAAO,CAACO,KAAD,EAAQE,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACL,UAAN,GAAmBI,MAAM,CAACJ,UAA1B;AAEH,GAHa,CAAd;AAIH,CALD;;AAOA,MAAMU,eAAe,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACvC,SAAOR,OAAO,CAACO,KAAD,EAAQE,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACP,IAAN,GAAaM,MAAM,CAACN,IAApB;AACH,GAFa,CAAd;AAGH,CAJD;;AAMA,MAAMa,SAAS,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACjC,SAAOR,OAAO,CAACO,KAAD,EAAQE,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACJ,cAAN,GAAuBG,MAAM,CAACH,cAA9B;AACH,GAFa,CAAd;AAGH,CAJD;;AAMA,MAAMW,OAAO,GAAG,CAACT,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACS,IAAf;AACI,SAAKlB,WAAW,CAACmB,gBAAjB;AACI,aAAOL,aAAa,CAACN,KAAD,EAAQC,MAAR,CAApB;;AACJ,SAAKT,WAAW,CAACoB,iBAAjB;AACI,aAAOL,eAAe,CAACP,KAAD,EAAQC,MAAR,CAAtB;;AACJ,SAAKT,WAAW,CAACqB,KAAjB;AACI,aAAOd,KAAK,CAACC,KAAD,EAAQC,MAAR,CAAZ;;AACJ,SAAKT,WAAW,CAACsB,MAAjB;AACI,aAAOT,MAAM,CAACL,KAAD,EAAQC,MAAR,CAAb;;AACJ,SAAKT,WAAW,CAACuB,mBAAjB;AACI,aAAOP,SAAS,CAACR,KAAD,EAAQC,MAAR,CAAhB;;AACJ,SAAKT,WAAW,CAACwB,SAAjB;AACI,aAAOb,QAAQ,CAACH,KAAD,EAAQC,MAAR,CAAf;;AACJ;AACI,aAAOD,KAAP;AAdR;AAgBH,CAjBD;;AAoBA,eAAeS,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\nimport produce from \"immer\";\r\n\r\nconst initialState = {\r\n    user: {},\r\n    loading: false,\r\n    isLoggedIn: false,\r\n    forgotPassword: false\r\n}\r\n\r\nconst login = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.isLoggedIn = true;\r\n        draft.loading = true;\r\n    })\r\n}\r\n\r\nconst setFunds = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.user.funds = action.funds;\r\n    })\r\n}\r\nconst logout = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.isLoggedIn = false;\r\n        draft.loading = false;\r\n    })\r\n}\r\n\r\nconst setIsLoggedIn = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.isLoggedIn = action.isLoggedIn;\r\n\r\n    })\r\n}\r\n\r\nconst setLoggedInUser = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.user = action.user;\r\n    })\r\n}\r\n\r\nconst setForgot = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.forgotPassword = action.forgotPassword;\r\n    })\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_IS_LOGGED_IN:\r\n            return setIsLoggedIn(state, action);\r\n        case actionTypes.SET_LOGGEDIN_USER:\r\n            return setLoggedInUser(state, action);\r\n        case actionTypes.LOGIN:\r\n            return login(state, action);\r\n        case actionTypes.LOGOUT:\r\n            return logout(state, action);\r\n        case actionTypes.SET_FORGOT_PASSWORD:\r\n            return setForgot(state, action);\r\n        case actionTypes.SET_FUNDS:\r\n            return setFunds(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
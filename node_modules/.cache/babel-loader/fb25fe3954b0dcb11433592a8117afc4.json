{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport firebase from '../../config/firebase/firebase';\nexport const initializeAllowedBanks = payload => {\n  return {\n    type: actionTypes.INITIALIZE_ALLOWED_BANKS,\n    payload: payload\n  };\n};\nexport const resetSavedBanks = payload => {\n  return {\n    type: actionTypes.RESET_SAVED_BANKS,\n    payload: payload\n  };\n};\nexport const initializeSavedBanks = payload => {\n  return {\n    type: actionTypes.INITIALIZE_SAVED_BANKS,\n    payload: payload\n  };\n};\nexport const fetchBanks = () => {\n  return dispatch => {\n    let data;\n    let newData = [];\n    firebase.auth().onAuthStateChanged(user => {\n      if (user && user.emailVerified) {\n        var accountRef = firebase.database().ref('bank-accounts/' + user.uid);\n        accountRef.on('value', snapshot => {\n          data = snapshot.val();\n\n          if (data === null) {\n            const accountDetail = {\n              accountName: '',\n              bank: '',\n              accountNumber: '--Use an exisitng bank--'\n            };\n            firebase.database().ref('bank-accounts/' + user.uid + \"/\" + accountDetail.accountNumber).set(accountDetail).then(() => {\n              var accountRef1 = firebase.database().ref('bank-accounts/' + user.uid);\n              accountRef1.on('value', snapshot => {\n                data = snapshot.val();\n                Object.keys(data).map(key => newData.splice(newData.length, newData.length + 1, data[key]));\n              });\n            });\n          } else {\n            Object.keys(data).map(key => newData.splice(newData.length, newData.length + 1, data[key]));\n          }\n\n          dispatch(initializeSavedBanks(newData));\n        });\n      }\n    });\n    let bankRef = firebase.database().ref().child(\"banks\");\n    bankRef.on(\"value\", snapshot => {\n      const resultData = snapshot.val();\n      let banks = [];\n      Object.keys(resultData).map((key, i) => banks.splice(banks.length, banks.length + 1, resultData[key]));\n      dispatch(initializeAllowedBanks(banks));\n    });\n    firebase.database().ref('bank-accounts').off();\n    bankRef.off();\n  };\n};\nexport const reseySavedBanks = () => {\n  return {\n    type: actionTypes.RESET_SAVED_BANKS\n  };\n};\nexport const setLoggedInUser = user => {\n  return {\n    type: actionTypes.SET_LOGGEDIN_USER,\n    user: user\n  };\n};","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/store/actions/banks.js"],"names":["actionTypes","firebase","initializeAllowedBanks","payload","type","INITIALIZE_ALLOWED_BANKS","resetSavedBanks","RESET_SAVED_BANKS","initializeSavedBanks","INITIALIZE_SAVED_BANKS","fetchBanks","dispatch","data","newData","auth","onAuthStateChanged","user","emailVerified","accountRef","database","ref","uid","on","snapshot","val","accountDetail","accountName","bank","accountNumber","set","then","accountRef1","Object","keys","map","key","splice","length","bankRef","child","resultData","banks","i","off","reseySavedBanks","setLoggedInUser","SET_LOGGEDIN_USER"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAO,MAAMC,sBAAsB,GAAIC,OAAD,IAAa;AAC/C,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,wBADf;AAEHF,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAQP,OAAO,MAAMG,eAAe,GAAIH,OAAD,IAAa;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACO,iBADf;AAEHJ,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAMP,OAAO,MAAMK,oBAAoB,GAAIL,OAAD,IAAa;AAC7C,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACS,sBADf;AAEHN,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAKH,CANM;AAOP,OAAO,MAAMO,UAAU,GAAG,MAAM;AAC5B,SAAOC,QAAQ,IAAI;AACf,QAAIC,IAAJ;AACA,QAAIC,OAAO,GAAG,EAAd;AAEAZ,IAAAA,QAAQ,CAACa,IAAT,GAAgBC,kBAAhB,CAAqCC,IAAD,IAAS;AACzC,UAAIA,IAAI,IAAIA,IAAI,CAACC,aAAjB,EAAgC;AAC5B,YAAIC,UAAU,GAAGjB,QAAQ,CAACkB,QAAT,GAAoBC,GAApB,CAAwB,mBAAmBJ,IAAI,CAACK,GAAhD,CAAjB;AACAH,QAAAA,UAAU,CAACI,EAAX,CAAc,OAAd,EAAwBC,QAAD,IAAc;AACjCX,UAAAA,IAAI,GAAGW,QAAQ,CAACC,GAAT,EAAP;;AACA,cAAIZ,IAAI,KAAK,IAAb,EAAmB;AACf,kBAAMa,aAAa,GAAG;AAAEC,cAAAA,WAAW,EAAE,EAAf;AAAmBC,cAAAA,IAAI,EAAE,EAAzB;AAA6BC,cAAAA,aAAa,EAAE;AAA5C,aAAtB;AACA3B,YAAAA,QAAQ,CAACkB,QAAT,GAAoBC,GAApB,CAAwB,mBAClBJ,IAAI,CAACK,GADa,GACP,GADO,GACDI,aAAa,CAACG,aADrC,EACoDC,GADpD,CAEQJ,aAFR,EAGMK,IAHN,CAGW,MAAM;AACT,kBAAIC,WAAW,GAAG9B,QAAQ,CAACkB,QAAT,GAAoBC,GAApB,CAAwB,mBAAmBJ,IAAI,CAACK,GAAhD,CAAlB;AACAU,cAAAA,WAAW,CAACT,EAAZ,CAAe,OAAf,EAAyBC,QAAD,IAAc;AAElCX,gBAAAA,IAAI,GAAGW,QAAQ,CAACC,GAAT,EAAP;AACAQ,gBAAAA,MAAM,CAACC,IAAP,CAAYrB,IAAZ,EAAkBsB,GAAlB,CAAsBC,GAAG,IAAItB,OAAO,CAACuB,MAAR,CAAevB,OAAO,CAACwB,MAAvB,EAA+BxB,OAAO,CAACwB,MAAR,GAAiB,CAAhD,EAAmDzB,IAAI,CAACuB,GAAD,CAAvD,CAA7B;AACH,eAJD;AAKH,aAVL;AAYH,WAdD,MAcO;AACHH,YAAAA,MAAM,CAACC,IAAP,CAAYrB,IAAZ,EAAkBsB,GAAlB,CAAsBC,GAAG,IACrBtB,OAAO,CAACuB,MAAR,CAAevB,OAAO,CAACwB,MAAvB,EAA+BxB,OAAO,CAACwB,MAAR,GAAiB,CAAhD,EAAmDzB,IAAI,CAACuB,GAAD,CAAvD,CADJ;AAGH;;AACDxB,UAAAA,QAAQ,CAACH,oBAAoB,CAACK,OAAD,CAArB,CAAR;AACH,SAtBD;AAuBH;AACJ,KA3BD;AA6BA,QAAIyB,OAAO,GAAGrC,QAAQ,CAACkB,QAAT,GAAoBC,GAApB,GAA0BmB,KAA1B,CAAgC,OAAhC,CAAd;AACAD,IAAAA,OAAO,CAAChB,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAC9B,YAAMiB,UAAU,GAAGjB,QAAQ,CAACC,GAAT,EAAnB;AACA,UAAIiB,KAAK,GAAG,EAAZ;AACAT,MAAAA,MAAM,CAACC,IAAP,CAAYO,UAAZ,EAAwBN,GAAxB,CAA4B,CAACC,GAAD,EAAMO,CAAN,KACxBD,KAAK,CAACL,MAAN,CAAaK,KAAK,CAACJ,MAAnB,EAA2BI,KAAK,CAACJ,MAAN,GAAe,CAA1C,EAA6CG,UAAU,CAACL,GAAD,CAAvD,CADJ;AAGAxB,MAAAA,QAAQ,CAACT,sBAAsB,CAACuC,KAAD,CAAvB,CAAR;AACH,KAPD;AAQAxC,IAAAA,QAAQ,CAACkB,QAAT,GAAoBC,GAApB,CAAwB,eAAxB,EAAyCuB,GAAzC;AACAL,IAAAA,OAAO,CAACK,GAAR;AAEH,GA7CD;AA8CH,CA/CM;AAkDP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,SAAO;AACHxC,IAAAA,IAAI,EAAEJ,WAAW,CAACO;AADf,GAAP;AAIH,CALM;AAOP,OAAO,MAAMsC,eAAe,GAAI7B,IAAD,IAAU;AACrC,SAAO;AACHZ,IAAAA,IAAI,EAAEJ,WAAW,CAAC8C,iBADf;AAEH9B,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport firebase from '../../config/firebase/firebase';\r\nexport const initializeAllowedBanks = (payload) => {\r\n    return {\r\n        type: actionTypes.INITIALIZE_ALLOWED_BANKS,\r\n        payload: payload\r\n    }\r\n}\r\n\r\n\r\nexport const resetSavedBanks = (payload) => {\r\n    return {\r\n        type: actionTypes.RESET_SAVED_BANKS,\r\n        payload: payload\r\n    }\r\n}\r\nexport const initializeSavedBanks = (payload) => {\r\n    return {\r\n        type: actionTypes.INITIALIZE_SAVED_BANKS,\r\n        payload: payload\r\n\r\n    }\r\n}\r\nexport const fetchBanks = () => {\r\n    return dispatch => {\r\n        let data;\r\n        let newData = [];\r\n\r\n        firebase.auth().onAuthStateChanged( (user)=> {\r\n            if (user && user.emailVerified) {\r\n                var accountRef = firebase.database().ref('bank-accounts/' + user.uid);\r\n                accountRef.on('value', (snapshot) => {\r\n                    data = snapshot.val();\r\n                    if (data === null) {\r\n                        const accountDetail = { accountName: '', bank: '', accountNumber: '--Use an exisitng bank--' }\r\n                        firebase.database().ref('bank-accounts/'\r\n                            + user.uid + \"/\" + accountDetail.accountNumber).set(\r\n                                accountDetail\r\n                            ).then(() => {\r\n                                var accountRef1 = firebase.database().ref('bank-accounts/' + user.uid);\r\n                                accountRef1.on('value', (snapshot) => {\r\n\r\n                                    data = snapshot.val();\r\n                                    Object.keys(data).map(key => newData.splice(newData.length, newData.length + 1, data[key]))\r\n                                })\r\n                            });\r\n\r\n                    } else {\r\n                        Object.keys(data).map(key =>\r\n                            newData.splice(newData.length, newData.length + 1, data[key])\r\n                        )\r\n                    }\r\n                    dispatch(initializeSavedBanks(newData))\r\n                });\r\n            }\r\n        });\r\n\r\n        let bankRef = firebase.database().ref().child(\"banks\");\r\n        bankRef.on(\"value\", (snapshot) => {\r\n            const resultData = snapshot.val();\r\n            let banks = [];\r\n            Object.keys(resultData).map((key, i) => \r\n                banks.splice(banks.length, banks.length + 1, resultData[key])\r\n            );\r\n            dispatch(initializeAllowedBanks(banks))\r\n        });\r\n        firebase.database().ref('bank-accounts').off();\r\n        bankRef.off();\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const reseySavedBanks = () => {\r\n    return {\r\n        type: actionTypes.RESET_SAVED_BANKS,\r\n\r\n    }\r\n}\r\n\r\nexport const setLoggedInUser = (user) => {\r\n    return {\r\n        type: actionTypes.SET_LOGGEDIN_USER,\r\n        user: user\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
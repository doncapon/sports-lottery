{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport produce from 'immer';\nimport _ from \"lodash\";\nimport { uuid, dateInYYYYMMDD } from '../../shared/utility';\nimport moment from 'moment';\nimport firebase from '../../config/firebase/firebase';\nconst initialStte = {\n  slips: null,\n  // [ \n  //  {\n  //                 id:  \"slip_1\",\n  //                 purchasable: false,\n  //                 slipPrice: 0,\n  //                 adding: false,\n  //                 removing: false,\n  //                 \"slip_1\":  { \n  //                             games: [\n  //                                 {\n  //                                     id: \"game_1\",\n  //                                     showHistory: false,\n  //                                     amount: 0,\n  //                                     \"game_1\": {\n  //                                             team1 : 'Manchester United',\n  //                                             team2: 'Watford FC' ,\n  //                                             isValid: false,\n  //                                             sides: [ {selected : false}, {selected : false}, {selected : false} ],\n  //                                     }\n  //                                 },\n  //                            ]   \n  //                   }\n  //            }\n  // ],\n  receipts: null,\n  editIndex: 0,\n  totalPrice: 0,\n  purchaseAll: false,\n  loading: false,\n  isStarted: false,\n  gamesLength: null,\n  isPaying: false,\n  isPaid: false,\n  isShowReceipt: false,\n  gameDate: null,\n  gameDateRaw: null,\n  isToWallet: true,\n  showFunds: true\n};\n\nconst setIsToWallet = (state, action) => {\n  return produce(state, draft => {\n    draft.isToWallet = action.isToWallet;\n  });\n};\n\nconst resetReduxBoard = (state, action) => {\n  return produce(state, draft => {\n    draft.slips = null;\n  });\n};\n\nconst setShowFunds = (state, action) => {\n  return produce(state, draft => {\n    draft.showFunds = action.show;\n  });\n};\n\nconst toggleShowFunds = (state, action) => {\n  return produce(state, draft => {\n    draft.showFunds = !draft.showFunds;\n  });\n};\n\nconst toggleIsShowReceipt = (state, action) => {\n  return produce(state, draft => {\n    draft.isShowReceipt = !draft.isShowReceipt;\n  });\n};\n\nconst toggleReceiptShowHistory = (state, action) => {\n  return produce(state, draft => {\n    draft.receipts[action.receiptIndex].showHistory = !draft.receipts[action.receiptIndex].showHistory;\n  });\n};\n\nconst setBoardLoading = (state, action) => {\n  return produce(state, draft => {\n    draft.loading = action.loading;\n  });\n};\n\nconst setReceipt = (state, action) => {\n  return produce(state, draft => {\n    let slips = _.cloneDeep(draft.slips);\n\n    let gameDay = action.gameDay;\n    slips.forEach(slip => {\n      slip.gameDay = gameDay;\n      slip.correctResult = 0;\n    });\n    draft.receipts = slips;\n    let slip = {};\n\n    for (let i = 0; i < draft.slips.length; i++) {\n      draft.slips[i].gameNumber = uuid();\n      slip.slipPrice = draft.slips[i].slipPrice;\n      slip.gameNumber = draft.slips[i].gameNumber;\n      slip.gameRows = draft.slips[i].slipAmount;\n      slip.basePrice = draft.slips[i].basePrice;\n      let slipGames = [];\n      slip.hits = 0;\n      slip.datePlayed = moment(Date.now()).format(\"YYYY-MM-DD HH:mm:ss\");\n\n      for (let k = 0; k < draft.slips[i][\"slip_\" + (i + 1)].games.length; k++) {\n        slipGames.splice(slipGames.length, slipGames.length + 1, {\n          fixture_id: draft.slips[i][\"slip_\" + (i + 1)].games[k].fixture_id,\n          selections: draft.slips[i][\"slip_\" + (i + 1)].games[k][\"game_\" + (k + 1)].sides\n        });\n      }\n\n      slip.games = Object.assign([], slipGames);\n      let evaDate = dateInYYYYMMDD(draft.slips[i].gameDate);\n      slip.evaluationDate = evaDate;\n      slip.isEvaluated = false;\n      slip.endTime = moment(draft.gameDateRaw).add(3, 'hours').format(\"YYYY-MM-DDTHH:mm:SS+00:00\");\n      let user = firebase.auth().currentUser;\n      slip.userId = user.uid;\n      let historyRef = firebase.database().ref(\"game-history\").child(user.uid).child(slip.gameNumber);\n      historyRef.set(slip);\n    }\n  });\n};\n\nconst setIsPaid = (state, action) => {\n  return produce(state, draft => {\n    draft.isPaid = action.isPaid;\n  });\n};\n\nconst setIsPaying = (state, action) => {\n  return produce(state, draft => {\n    draft.isPaying = action.isPaying;\n  });\n};\n\nconst initializeBoard = (state, action) => {\n  return produce(state, draft => {\n    let slipId = \"slip_\";\n    let games1 = [];\n    let gameId = \"game_\";\n    let fixtures = action.fixtures.sort((a, b) => a.fixture_id > b.fixture_id ? 1 : -1);\n    fixtures.forEach((fixture, i) => {\n      let game = {\n        id: gameId + (i + 1),\n        amount: 0,\n        league: fixture.leagueName,\n        fixture_id: fixture.fixture_id,\n        status: fixture.status,\n        [gameId + (i + 1)]: {\n          team1_id: fixture.homeTeam_id,\n          team1: fixture.homeTeam,\n          team2_id: fixture.awayTeam_id,\n          team2: fixture.awayTeam,\n          isValid: false,\n          sides: [{\n            selected: false\n          }, {\n            selected: false\n          }, {\n            selected: false\n          }]\n        }\n      };\n      games1.splice(i, i + 1, game);\n    });\n    let slipInner = Object.assign({}, {\n      games: games1\n    });\n    let newSlip = Object.assign({}, {\n      id: slipId + 1,\n      purchasable: false,\n      slipAmount: 0,\n      basePrice: action.basePrice,\n      slipPrice: 0,\n      adding: false,\n      removing: false,\n      [slipId + 1]: slipInner\n    });\n    newSlip.games = Object.assign([], games1);\n    newSlip.gameDate = moment(action.fixtures[0].event_date).format(\"DD-MM-YYYY\");\n    newSlip.gameNumber = uuid();\n    newSlip.basePrice = action.basePrice;\n    let newSlips = [];\n    newSlips.splice(0, 1, newSlip);\n    draft.gamesLength = action.fixtures.length;\n    draft.slips = Object.assign([], newSlips);\n    draft.isPaying = false;\n    draft.isPaid = false;\n    draft.isShowReceipt = false;\n    draft.gameDateRaw = action.fixtures[0].event_date;\n    draft.gameDate = moment(action.fixtures[0].event_date).format(\"DD-MM-YYYY\");\n    draft.loading = true;\n  });\n};\n\nconst toggleShowHistory = (state, action) => {\n  return produce(state, draft => {\n    draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)].games[action.gameIndex].showHistory = !draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)].games[action.gameIndex].showHistory;\n  });\n};\n\nconst getRandomInt = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst generateSlip = (state, action) => {\n  return produce(state, draft => {\n    let arrayGames = [[]];\n    let clonedGames = draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)].games;\n    draft.slips[state.editIndex].slipPrice = action.basePrice;\n    let gameRandom = getRandomInt(state.gamesLength);\n    let rand2;\n\n    for (let i = 0; i < 1; i++) {\n      let temp = getRandomInt(state.gamesLength);\n\n      if (gameRandom === temp) {\n        continue;\n      }\n\n      rand2 = temp;\n      break;\n    }\n\n    let amount = action.amount.split(' ')[0];\n    let sides = [0, 0, 0];\n\n    for (let i = 0; i < state.gamesLength; i++) {\n      let rand = getRandomInt(3);\n      sides[rand] = 1;\n      arrayGames[i] = Object.assign([], sides);\n      sides = [0, 0, 0];\n    }\n\n    arrayGames[gameRandom] = Object.assign([], [1, 1, 1]);\n\n    if (amount === \"480\") {\n      let attempt = 0;\n      let InitialAttempt = 3;\n\n      while (attempt < InitialAttempt) {\n        let newRand = getRandomInt(arrayGames.length);\n        let sideRand = getRandomInt(3);\n\n        if (arrayGames[newRand][sideRand] === 1 || newRand === gameRandom || arrayGames[newRand][0] + arrayGames[newRand][1] + arrayGames[newRand][2] > 1) {\n          continue;\n        }\n\n        arrayGames[newRand][sideRand] = 1;\n        attempt++;\n      }\n    } else if (amount === \"960\") {\n      let attempt = 0;\n      let InitialAttempt = 4;\n\n      while (attempt < InitialAttempt) {\n        let newRand = getRandomInt(arrayGames.length);\n        let sideRand = getRandomInt(3);\n\n        if (arrayGames[newRand][sideRand] === 1 || newRand === gameRandom || arrayGames[newRand][0] + arrayGames[newRand][1] + arrayGames[newRand][2] > 1) {\n          continue;\n        }\n\n        arrayGames[newRand][sideRand] = 1;\n        attempt++;\n      }\n    } else {\n      let attempt = 0;\n      let InitialAttempt = 3;\n      arrayGames[rand2] = Object.assign([], [1, 1, 1]);\n\n      while (attempt < InitialAttempt) {\n        let newRand = getRandomInt(arrayGames.length);\n        let sideRand = getRandomInt(3);\n\n        if (arrayGames[newRand][sideRand] === 1 || newRand === gameRandom || newRand === rand2 || arrayGames[newRand][0] + arrayGames[newRand][1] + arrayGames[newRand][2] > 1) {\n          continue;\n        }\n\n        arrayGames[newRand][sideRand] = 1;\n        attempt++;\n      }\n    }\n\n    for (let i = 0; i < arrayGames.length; i++) {\n      for (let k = 0; k < 3; k++) {\n        if (arrayGames[i][k] === 1) {\n          clonedGames[i][\"game_\" + (i + 1)].sides[k].selected = true;\n        } else {\n          clonedGames[i][\"game_\" + (i + 1)].sides[k].selected = false;\n        }\n      }\n    }\n\n    for (let i = 0; i < arrayGames.length; i++) {\n      draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)].games[i].amount = arrayGames[i][0] + arrayGames[i][1] + arrayGames[i][2];\n    }\n\n    draft.slips[state.editIndex].purchasable = true;\n    draft.slips[state.editIndex].basePrice = action.basePrice;\n    draft.slips[state.editIndex].gameNumber = uuid();\n    draft.isPaying = false;\n    draft.isPaid = false;\n    draft.isShowReceipt = false;\n  });\n};\n\nconst calculateSpecificSlipPrice = (state, action) => {\n  return produce(state, draft => {\n    let games = draft.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)].games;\n    let slipAmount = 1;\n    let totalPrice = action.basePrice;\n\n    for (let i = 0; i < games.length; i++) {\n      if (games[i].amount > 1) {\n        totalPrice *= 2;\n        slipAmount *= 2;\n\n        if (games[i].amount > 2) {\n          totalPrice *= 1.5;\n          slipAmount *= 1.5;\n        }\n      }\n    }\n\n    draft.slips[action.slipIndex].slipAmount = slipAmount;\n    draft.slips[action.slipIndex].slipPrice = totalPrice;\n  });\n};\n\nconst checkHasStartedPlaying = (state, action) => {\n  return produce(state, draft => {\n    const editSlip = _.cloneDeep(state.slips[state.editIndex]);\n\n    const games = editSlip[\"slip_\" + (state.editIndex + 1)].games;\n    let hasStarted = false;\n\n    for (let i = 0; i < games.length; i++) {\n      for (let k = 0; k < games[i][\"game_\" + (i + 1)].sides.length; k++) {\n        if (games[i][\"game_\" + (i + 1)].sides[k].selected) {\n          hasStarted = true;\n          break;\n        }\n      }\n\n      if (hasStarted) {\n        break;\n      }\n    }\n\n    draft.isStarted = hasStarted;\n  });\n};\n\nconst EmptyEditingIndexSlip = (state, action) => {\n  return produce(state, draft => {\n    const editSlip = _.cloneDeep(state.slips[state.editIndex]);\n\n    const games = editSlip[\"slip_\" + (state.editIndex + 1)].games;\n    const side = {\n      selected: false\n    };\n    const len = 3;\n\n    for (let i = 0; i < games.length; i++) {\n      for (let k = 0; k < len; k++) {\n        games[i][\"game_\" + (i + 1)].sides.push(side);\n      }\n\n      games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\n    }\n\n    editSlip[\"slip_\" + (state.editIndex + 1)].games = games;\n    editSlip.purchasable = false;\n    editSlip.slipPrice = 0;\n    draft.slips[state.editIndex] = Object.assign({}, editSlip);\n    draft.purchaseAll = false;\n    draft.totalPrice = 0;\n    draft.isStarted = true;\n    draft.isPaying = false;\n    draft.isPaid = false;\n    draft.isShowReceipt = false;\n  });\n};\n\n_c = EmptyEditingIndexSlip;\n\nconst checkPurchasable = (state, action) => {\n  return produce(state, draft => {\n    let purchasable = true;\n    const slip = state.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)];\n\n    for (let i = 0; i < slip.games.length; i++) {\n      const isPurse = sideIsValid(slip.games[i][\"game_\" + (i + 1)].sides);\n\n      if (!isPurse) {\n        purchasable = false;\n        break;\n      }\n    }\n\n    draft.slips[action.slipIndex].purchasable = purchasable;\n  });\n};\n\nconst copyBetslip = (state, action) => {\n  return produce(state, draft => {\n    const oldId = \"slip_\" + (action.position + 1);\n    const newId = \"slip_\" + (draft.slips.length + 1);\n\n    let slip = _.cloneDeep(draft.slips[action.position]);\n\n    let newslip = _.cloneDeep(draft.slips[action.position][oldId]);\n\n    draft.slips.splice(draft.slips.length, 0, {\n      id: newId,\n      purchasable: true,\n      slipAmount: slip.slipAmount,\n      basePrice: slip.basePrice,\n      slipPrice: state.slips[action.position].slipPrice,\n      adding: false,\n      removing: false,\n      [newId]: newslip\n    });\n    draft.slips[draft.slips.length - 1].gameNumber = uuid();\n    draft.slips[draft.slips.length - 1].gameDate = slip.gameDate;\n    draft.isPaying = false;\n    draft.isPaid = false;\n    draft.isShowReceipt = false;\n  });\n};\n\nconst addEmptySlip = (state, action) => {\n  return produce(state, draft => {\n    const clonedSlips = _.cloneDeep(state.slips);\n\n    let lastLength = state.slips.length;\n    const clonedSlip = clonedSlips[lastLength - 1];\n    let oldId = clonedSlip.id;\n    let newId = \"slip_\" + (parseInt(oldId.split('_')[1]) + 1);\n    const games = clonedSlip[\"slip_\" + lastLength].games;\n    const side = {\n      selected: false\n    };\n    const len = 3;\n\n    for (let i = 0; i < games.length; i++) {\n      for (let k = 0; k < len; k++) {\n        games[i][\"game_\" + (i + 1)].sides.push(side);\n      }\n\n      games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\n      games[i].amount = 0;\n    }\n\n    clonedSlip.purchasable = false;\n    clonedSlip.adding = false;\n    clonedSlip.removing = false;\n    clonedSlip.slipPrice = 0;\n    clonedSlip.gameDate = draft.gameDate;\n    clonedSlip.gameNumber = uuid();\n    clonedSlip.basePrice = action.basePrice;\n    clonedSlip.id = newId;\n    clonedSlip[newId] = clonedSlip[oldId];\n    delete [clonedSlip[oldId]];\n    draft.slips.splice(lastLength, 1, clonedSlip);\n    draft.isPaying = false;\n    draft.isPaid = false;\n    draft.isShowReceipt = false;\n  });\n};\n\nconst deleteAndResetAll = (state, action) => {\n  return produce(state, draft => {\n    const clonedSlips = _.cloneDeep(state.slips);\n\n    if (state.slips.length > 1) {\n      clonedSlips.splice(1, state.slips.length);\n    }\n\n    if (clonedSlips.length <= 1) {\n      const games = _.cloneDeep(clonedSlips[0][\"slip_1\"].games);\n\n      const side = {\n        selected: false\n      };\n      const len = 3;\n\n      for (let i = 0; i < games.length; i++) {\n        for (let k = 0; k < len; k++) {\n          games[i][\"game_\" + (i + 1)].sides.push(side);\n          games[i].amount = 0;\n        }\n\n        games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\n      }\n\n      clonedSlips[0][\"slip_1\"].games = games;\n      clonedSlips[0].purchasable = false;\n      clonedSlips[0].slipPrice = 0;\n      clonedSlips[0].slipAmount = 0;\n      clonedSlips[0].gameNumber = uuid();\n    }\n\n    draft.slips = _.cloneDeep(clonedSlips);\n    draft.totalPrice = 0;\n    draft.purchaseAll = false;\n    draft.isPaying = false;\n    draft.isShowReceipt = false;\n    draft.editIndex = 0;\n  });\n};\n\nconst toggleSelectedTile = (state, action) => {\n  return produce(state, draft => {\n    draft.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)].games[action.gameIndex]['game_' + (action.gameIndex + 1)].sides[action.sideIndex].selected = !action.side;\n    draft.isPaying = false;\n    draft.isPaid = false;\n    draft.isShowReceipt = false;\n  });\n};\n\nconst calulateGameAmount = (state, action) => {\n  return produce(state, draft => {\n    let side = draft.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)].games[action.gameIndex]['game_' + (action.gameIndex + 1)].sides[action.sideIndex].selected;\n    let game = draft.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)].games[action.gameIndex];\n\n    if (side) {\n      game.amount += 1;\n    } else {\n      game.amount -= 1;\n    }\n  });\n};\n\nconst calculateGrandTtoalPriceOfAllSlips = (state, action) => {\n  return produce(state, draft => {\n    let slips = state.slips;\n    let totalPrice = 0;\n    slips.forEach((slip, i) => {\n      if (slip.purchasable) totalPrice += slip.slipPrice;\n    });\n    draft.totalPrice = totalPrice;\n  });\n};\n\nconst removeRowFromBetSlip = (state, action) => {\n  return produce(state, draft => {\n    if (draft.slips.length > 1) {\n      const clonedSlips = _.cloneDeep(draft.slips);\n\n      let len = clonedSlips.length;\n      let initialPrice = clonedSlips[action.deleteId].slipPrice;\n      let remainderLen = len - action.deleteId - 1;\n      clonedSlips.splice(action.deleteId, 1);\n      let newId = \"slip_\";\n      let oldId = \"slip_\";\n\n      for (let i = 0; i < remainderLen; i++) {\n        let k = i + action.deleteId;\n        newId += k + 1;\n        oldId += k + 2;\n        clonedSlips[k].id = newId;\n        clonedSlips[k][newId] = clonedSlips[k][oldId];\n        delete clonedSlips[k][oldId];\n        newId = 'slip_';\n        oldId = \"slip_\";\n      }\n\n      draft.slips = _.cloneDeep(clonedSlips);\n      draft.totalPrice -= initialPrice;\n    } else {\n      const games = _.cloneDeep(state.slips[0][\"slip_1\"].games);\n\n      if (state.slips.length <= 1) {\n        const side = {\n          selected: false\n        };\n        const len = 3;\n\n        for (let i = 0; i < games.length; i++) {\n          for (let k = 0; k < len; k++) {\n            games[i][\"game_\" + (i + 1)].sides.push(side);\n          }\n\n          games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\n        }\n\n        draft.slips[0][\"slip_1\"].games = games;\n        draft.slips[0].purchasable = false;\n        draft.totalPrice = 0;\n      }\n    }\n\n    draft.isPaying = false;\n    draft.isPaid = false;\n    draft.isShowReceipt = false;\n  });\n};\n\nconst setEditIndex = (state, action) => {\n  return { ...state,\n    editIndex: action.position,\n    isPaying: false,\n    isPaid: false,\n    isShowReceipt: false\n  };\n};\n\nconst setAdding = (state, action) => {\n  return produce(state, draft => {\n    draft.slips[action.slipIndex].adding = action.isAdded;\n  });\n};\n\nconst setRemoving = (state, action) => {\n  return produce(state, draft => {\n    draft.slips[action.slipIndex].removing = action.removing;\n  });\n};\n\nconst sideIsValid = sides => {\n  let allValid = false;\n\n  for (let side of sides) {\n    if (side.selected === true) {\n      allValid = true;\n      break;\n    }\n  }\n\n  return allValid;\n};\n\nconst setPurchaseAll = (state, action) => {\n  return produce(state, draft => {\n    let purchase = true;\n\n    for (let i = 0; i < state.slips.length; i++) {\n      let purchasable = true;\n      const slip = state.slips[i][\"slip_\" + (i + 1)];\n\n      for (let k = 0; k < slip.games.length; k++) {\n        const isPurse = sideIsValid(slip.games[k][\"game_\" + (k + 1)].sides);\n\n        if (!isPurse) {\n          purchasable = false;\n          break;\n        }\n      }\n\n      if (!purchasable) {\n        purchase = false;\n        break;\n      }\n    }\n\n    draft.purchaseAll = purchase;\n  });\n};\n\nconst reducer = (state = initialStte, action) => {\n  switch (action.type) {\n    case actionTypes.RESET_BOARD:\n      return resetReduxBoard(state, action);\n\n    case actionTypes.SET_BOARD_LOADING:\n      return setBoardLoading(state, action);\n\n    case actionTypes.TOGGLE_SHOWFUNDS:\n      return toggleShowFunds(state, action);\n\n    case actionTypes.TOGGLE_SHOW_RECEIPT:\n      return toggleIsShowReceipt(state, action);\n\n    case actionTypes.SET_RECEIPT:\n      return setReceipt(state, action);\n\n    case actionTypes.CALCULATE_EDIT_INDEX_PRICE:\n      return calculateSpecificSlipPrice(state, action);\n\n    case actionTypes.SET_ISPAID:\n      return setIsPaid(state, action);\n\n    case actionTypes.SET_ISPAYING:\n      return setIsPaying(state, action);\n\n    case actionTypes.TOGGLE_SHOW_HISTORY:\n      return toggleShowHistory(state, action);\n\n    case actionTypes.CHECK_HAS_STARED:\n      return checkHasStartedPlaying(state, action);\n\n    case actionTypes.EMPTY_EDITING_SLIP:\n      return EmptyEditingIndexSlip(state, action);\n\n    case actionTypes.INITIALIZE_BOARD:\n      return initializeBoard(state, action);\n\n    case actionTypes.ADD_EMPTY_SLIP:\n      return addEmptySlip(state, action);\n\n    case actionTypes.SET_EDITING_INDEX:\n      return setEditIndex(state, action);\n\n    case actionTypes.SET_ADDING:\n      return setAdding(state, action);\n\n    case actionTypes.SET_REMOVING:\n      return setRemoving(state, action);\n\n    case actionTypes.TOGGLE_SELECTED_TILE:\n      return toggleSelectedTile(state, action);\n\n    case actionTypes.COPY_BETSLIP:\n      return copyBetslip(state, action);\n\n    case actionTypes.REMOVE_ROW_FROM_BETSLIP:\n      return removeRowFromBetSlip(state, action);\n\n    case actionTypes.CHECK_PURCHASABLE:\n      return checkPurchasable(state, action);\n\n    case actionTypes.PURCHASE_ALL:\n      return setPurchaseAll(state, action);\n\n    case actionTypes.DELETE_AND_RESET_ALL:\n      return deleteAndResetAll(state, action);\n\n    case actionTypes.CALCULATE_SLIP_PRICE:\n      return calulateGameAmount(state, action);\n\n    case actionTypes.CALCULATE_GRAND_tOTAL:\n      return calculateGrandTtoalPriceOfAllSlips(state, action);\n\n    case actionTypes.GENERATE_SLIP:\n      return generateSlip(state, action);\n\n    case actionTypes.SET_SHOW_FUNDS:\n      return setShowFunds(state, action);\n\n    case actionTypes.SET_ISTOWALLET:\n      return setIsToWallet(state, action);\n\n    case actionTypes.TOGGLE_SHOW_RECEIPT_HISTORY:\n      return toggleReceiptShowHistory(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmptyEditingIndexSlip\");","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/store/reducers/board.js"],"names":["actionTypes","produce","_","uuid","dateInYYYYMMDD","moment","firebase","initialStte","slips","receipts","editIndex","totalPrice","purchaseAll","loading","isStarted","gamesLength","isPaying","isPaid","isShowReceipt","gameDate","gameDateRaw","isToWallet","showFunds","setIsToWallet","state","action","draft","resetReduxBoard","setShowFunds","show","toggleShowFunds","toggleIsShowReceipt","toggleReceiptShowHistory","receiptIndex","showHistory","setBoardLoading","setReceipt","cloneDeep","gameDay","forEach","slip","correctResult","i","length","gameNumber","slipPrice","gameRows","slipAmount","basePrice","slipGames","hits","datePlayed","Date","now","format","k","games","splice","fixture_id","selections","sides","Object","assign","evaDate","evaluationDate","isEvaluated","endTime","add","user","auth","currentUser","userId","uid","historyRef","database","ref","child","set","setIsPaid","setIsPaying","initializeBoard","slipId","games1","gameId","fixtures","sort","a","b","fixture","game","id","amount","league","leagueName","status","team1_id","homeTeam_id","team1","homeTeam","team2_id","awayTeam_id","team2","awayTeam","isValid","selected","slipInner","newSlip","purchasable","adding","removing","event_date","newSlips","toggleShowHistory","gameIndex","getRandomInt","max","Math","floor","random","generateSlip","arrayGames","clonedGames","gameRandom","rand2","temp","split","rand","attempt","InitialAttempt","newRand","sideRand","calculateSpecificSlipPrice","slipIndex","checkHasStartedPlaying","editSlip","hasStarted","EmptyEditingIndexSlip","side","len","push","checkPurchasable","isPurse","sideIsValid","copyBetslip","oldId","position","newId","newslip","addEmptySlip","clonedSlips","lastLength","clonedSlip","parseInt","deleteAndResetAll","toggleSelectedTile","sideIndex","calulateGameAmount","calculateGrandTtoalPriceOfAllSlips","removeRowFromBetSlip","initialPrice","deleteId","remainderLen","setEditIndex","setAdding","isAdded","setRemoving","allValid","setPurchaseAll","purchase","reducer","type","RESET_BOARD","SET_BOARD_LOADING","TOGGLE_SHOWFUNDS","TOGGLE_SHOW_RECEIPT","SET_RECEIPT","CALCULATE_EDIT_INDEX_PRICE","SET_ISPAID","SET_ISPAYING","TOGGLE_SHOW_HISTORY","CHECK_HAS_STARED","EMPTY_EDITING_SLIP","INITIALIZE_BOARD","ADD_EMPTY_SLIP","SET_EDITING_INDEX","SET_ADDING","SET_REMOVING","TOGGLE_SELECTED_TILE","COPY_BETSLIP","REMOVE_ROW_FROM_BETSLIP","CHECK_PURCHASABLE","PURCHASE_ALL","DELETE_AND_RESET_ALL","CALCULATE_SLIP_PRICE","CALCULATE_GRAND_tOTAL","GENERATE_SLIP","SET_SHOW_FUNDS","SET_ISTOWALLET","TOGGLE_SHOW_RECEIPT_HISTORY"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\r\nimport produce from 'immer';\r\nimport _ from \"lodash\";\r\nimport { uuid, dateInYYYYMMDD } from '../../shared/utility'\r\nimport moment from 'moment';\r\nimport firebase from '../../config/firebase/firebase';\r\nconst initialStte = {\r\n\r\n    slips: null,\r\n    // [ \r\n\r\n    //  {\r\n    //                 id:  \"slip_1\",\r\n    //                 purchasable: false,\r\n    //                 slipPrice: 0,\r\n    //                 adding: false,\r\n    //                 removing: false,\r\n    //                 \"slip_1\":  { \r\n    //                             games: [\r\n    //                                 {\r\n    //                                     id: \"game_1\",\r\n    //                                     showHistory: false,\r\n    //                                     amount: 0,\r\n    //                                     \"game_1\": {\r\n    //                                             team1 : 'Manchester United',\r\n    //                                             team2: 'Watford FC' ,\r\n    //                                             isValid: false,\r\n    //                                             sides: [ {selected : false}, {selected : false}, {selected : false} ],\r\n    //                                     }\r\n    //                                 },\r\n\r\n    //                            ]   \r\n    //                   }\r\n    //            }\r\n    // ],\r\n    receipts: null,\r\n    editIndex: 0,\r\n    totalPrice: 0,\r\n    purchaseAll: false,\r\n    loading: false,\r\n    isStarted: false,\r\n    gamesLength: null,\r\n    isPaying: false,\r\n    isPaid: false,\r\n    isShowReceipt: false,\r\n    gameDate: null,\r\n    gameDateRaw: null,\r\n    isToWallet: true,\r\n\r\n    showFunds: true,\r\n};\r\n\r\nconst setIsToWallet = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.isToWallet = action.isToWallet;\r\n    });\r\n}\r\n\r\nconst resetReduxBoard = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.slips = null;\r\n    })\r\n}\r\nconst setShowFunds = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.showFunds = action.show;\r\n    });\r\n}\r\n\r\nconst toggleShowFunds = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.showFunds = !draft.showFunds\r\n    });\r\n}\r\nconst toggleIsShowReceipt = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.isShowReceipt = !draft.isShowReceipt\r\n    });\r\n}\r\nconst toggleReceiptShowHistory = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.receipts[action.receiptIndex].showHistory =\r\n            !draft.receipts[action.receiptIndex].showHistory;\r\n    })\r\n}\r\n\r\nconst setBoardLoading = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.loading = action.loading\r\n    })\r\n}\r\nconst setReceipt = (state, action) => {\r\n    return produce(state, draft => {\r\n        let slips = _.cloneDeep(draft.slips);\r\n        let gameDay = action.gameDay;\r\n\r\n        slips.forEach(slip => {\r\n            slip.gameDay = gameDay;\r\n            slip.correctResult = 0;\r\n        });\r\n        draft.receipts = slips;\r\n        let slip = {};\r\n        for (let i = 0; i < draft.slips.length; i++) {\r\n            draft.slips[i].gameNumber = uuid();\r\n            slip.slipPrice = draft.slips[i].slipPrice;\r\n            slip.gameNumber = draft.slips[i].gameNumber;\r\n            slip.gameRows = draft.slips[i].slipAmount;\r\n            slip.basePrice = draft.slips[i].basePrice;\r\n            let slipGames = [];\r\n            slip.hits = 0;\r\n            slip.datePlayed = moment(Date.now()).format(\"YYYY-MM-DD HH:mm:ss\");\r\n            for (let k = 0; k < draft.slips[i][\"slip_\" + (i + 1)].games.length; k++) {\r\n                slipGames.splice(slipGames.length, slipGames.length + 1, {\r\n                    fixture_id: draft.slips[i][\"slip_\" + (i + 1)].games[k].fixture_id,\r\n                    selections: draft.slips[i][\"slip_\" + (i + 1)].games[k][\"game_\" + (k + 1)].sides,\r\n\r\n                });\r\n            }\r\n            slip.games = Object.assign([], slipGames);\r\n            let evaDate = dateInYYYYMMDD(draft.slips[i].gameDate);\r\n            slip.evaluationDate = evaDate;\r\n            slip.isEvaluated = false;\r\n            slip.endTime = moment(draft.gameDateRaw).add(3, 'hours').format(\"YYYY-MM-DDTHH:mm:SS+00:00\")\r\n            let user = firebase.auth().currentUser;\r\n            slip.userId = user.uid;\r\n            let historyRef = firebase.database().ref(\"game-history\").child(user.uid).child(slip.gameNumber);\r\n            historyRef.set(slip);\r\n        }\r\n    })\r\n}\r\nconst setIsPaid = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.isPaid = action.isPaid;\r\n\r\n    })\r\n}\r\n\r\nconst setIsPaying = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.isPaying = action.isPaying;\r\n    })\r\n}\r\nconst initializeBoard = (state, action) => {\r\n\r\n    return produce(state, draft => {\r\n\r\n        let slipId = \"slip_\";\r\n        let games1 = [];\r\n        let gameId = \"game_\";\r\n        let fixtures = action.fixtures.sort((a, b) => a.fixture_id > b.fixture_id ? 1 : -1);\r\n        fixtures.forEach((fixture, i) => {\r\n            let game = {\r\n                id: gameId + (i + 1),\r\n                amount: 0,\r\n                league: fixture.leagueName,\r\n                fixture_id: fixture.fixture_id,\r\n                status: fixture.status,\r\n                [gameId + (i + 1)]: {\r\n                    team1_id: fixture.homeTeam_id,\r\n                    team1: fixture.homeTeam,\r\n                    team2_id: fixture.awayTeam_id,\r\n                    team2: fixture.awayTeam, isValid: false,\r\n                    sides: [{ selected: false }, { selected: false }, { selected: false }],\r\n                }\r\n            };\r\n\r\n            games1.splice(i, i + 1, game);\r\n        });\r\n        let slipInner = Object.assign({}, { games: games1 });\r\n        let newSlip = Object.assign({}, {\r\n            id: (slipId + 1), purchasable: false, slipAmount: 0, basePrice: action.basePrice,\r\n            slipPrice: 0, adding: false, removing: false, [slipId + 1]: slipInner\r\n        });\r\n        newSlip.games = Object.assign([], games1);\r\n        newSlip.gameDate = moment(action.fixtures[0].event_date).format(\"DD-MM-YYYY\");\r\n        newSlip.gameNumber = uuid();\r\n        newSlip.basePrice = action.basePrice;\r\n        let newSlips = [];\r\n        newSlips.splice(0, 1, newSlip);\r\n        draft.gamesLength = action.fixtures.length;\r\n        draft.slips = Object.assign([], newSlips);\r\n        draft.isPaying = false;\r\n        draft.isPaid = false;\r\n        draft.isShowReceipt = false;\r\n        draft.gameDateRaw = action.fixtures[0].event_date;\r\n        draft.gameDate = moment(action.fixtures[0].event_date).format(\"DD-MM-YYYY\");\r\n\r\n        draft.loading = true;\r\n\r\n    });\r\n}\r\nconst toggleShowHistory = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)]\r\n            .games[action.gameIndex].showHistory = !draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)]\r\n                .games[action.gameIndex].showHistory;\r\n    })\r\n}\r\n\r\nconst getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\nconst generateSlip = (state, action) => {\r\n    return produce(state, draft => {\r\n        let arrayGames = [[]];\r\n        let clonedGames = draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)].games;\r\n        draft.slips[state.editIndex].slipPrice = action.basePrice;\r\n        let gameRandom = getRandomInt(state.gamesLength);\r\n        let rand2;\r\n        for (let i = 0; i < 1; i++) {\r\n            let temp = getRandomInt(state.gamesLength);\r\n            if (gameRandom === temp) {\r\n                continue;\r\n            }\r\n            rand2 = temp;\r\n            break;\r\n        }\r\n        let amount = action.amount.split(' ')[0];\r\n        let sides = [0, 0, 0];\r\n        for (let i = 0; i < state.gamesLength; i++) {\r\n            let rand = getRandomInt(3);\r\n            sides[rand] = 1;\r\n            arrayGames[i] = Object.assign([], sides);\r\n            sides = [0, 0, 0];\r\n        }\r\n        arrayGames[gameRandom] = Object.assign([], [1, 1, 1]);\r\n        if (amount === \"480\") {\r\n            let attempt = 0;\r\n            let InitialAttempt = 3;\r\n            while (attempt < InitialAttempt) {\r\n                let newRand = getRandomInt(arrayGames.length);\r\n                let sideRand = getRandomInt(3);\r\n                if (arrayGames[newRand][sideRand] === 1 || newRand === gameRandom ||\r\n                    (arrayGames[newRand][0] + arrayGames[newRand][1] + arrayGames[newRand][2]) > 1) {\r\n                    continue;\r\n                }\r\n                arrayGames[newRand][sideRand] = 1;\r\n                attempt++;\r\n            }\r\n        } else if (amount === \"960\") {\r\n            let attempt = 0;\r\n            let InitialAttempt = 4;\r\n\r\n            while (attempt < InitialAttempt) {\r\n                let newRand = getRandomInt(arrayGames.length);\r\n                let sideRand = getRandomInt(3);\r\n                if (arrayGames[newRand][sideRand] === 1 || newRand === gameRandom ||\r\n                    (arrayGames[newRand][0] + arrayGames[newRand][1] + arrayGames[newRand][2]) > 1) {\r\n                    continue;\r\n                }\r\n                arrayGames[newRand][sideRand] = 1;\r\n                attempt++;\r\n            }\r\n        } else {\r\n            let attempt = 0;\r\n            let InitialAttempt = 3;\r\n            arrayGames[rand2] = Object.assign([], [1, 1, 1]);\r\n\r\n            while (attempt < InitialAttempt) {\r\n                let newRand = getRandomInt(arrayGames.length);\r\n                let sideRand = getRandomInt(3);\r\n                if (arrayGames[newRand][sideRand] === 1 || newRand === gameRandom ||\r\n                    newRand === rand2 ||\r\n                    (arrayGames[newRand][0] + arrayGames[newRand][1] + arrayGames[newRand][2]) > 1) {\r\n                    continue;\r\n                }\r\n                arrayGames[newRand][sideRand] = 1;\r\n                attempt++;\r\n\r\n            }\r\n        }\r\n        for (let i = 0; i < arrayGames.length; i++) {\r\n            for (let k = 0; k < 3; k++) {\r\n                if (arrayGames[i][k] === 1) {\r\n                    clonedGames[i][\"game_\" + (i + 1)].sides[k].selected = true;\r\n                } else {\r\n                    clonedGames[i][\"game_\" + (i + 1)].sides[k].selected = false;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < arrayGames.length; i++) {\r\n            draft.slips[state.editIndex][\"slip_\" + (state.editIndex + 1)]\r\n                .games[i].amount = arrayGames[i][0] + arrayGames[i][1] + arrayGames[i][2]\r\n        }\r\n        draft.slips[state.editIndex].purchasable = true;\r\n        draft.slips[state.editIndex].basePrice = action.basePrice;\r\n        draft.slips[state.editIndex].gameNumber = uuid();\r\n        draft.isPaying = false;\r\n        draft.isPaid = false;\r\n        draft.isShowReceipt = false;\r\n\r\n\r\n    })\r\n}\r\n\r\nconst calculateSpecificSlipPrice = (state, action) => {\r\n    return produce(state, draft => {\r\n        let games = draft.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)]\r\n            .games;\r\n        let slipAmount = 1;\r\n        let totalPrice = action.basePrice;\r\n        for (let i = 0; i < games.length; i++) {\r\n            if (games[i].amount > 1) {\r\n                totalPrice *= 2;\r\n                slipAmount *= 2;\r\n                if (games[i].amount > 2) {\r\n                    totalPrice *= 1.5;\r\n                    slipAmount *= 1.5;\r\n                }\r\n            }\r\n\r\n        }\r\n        draft.slips[action.slipIndex].slipAmount = slipAmount;\r\n        draft.slips[action.slipIndex].slipPrice = totalPrice;\r\n    });\r\n}\r\n\r\nconst checkHasStartedPlaying = (state, action) => {\r\n    return produce(state, draft => {\r\n\r\n\r\n        const editSlip = _.cloneDeep(state.slips[state.editIndex]);\r\n        const games = editSlip[\"slip_\" + (state.editIndex + 1)].games;\r\n        let hasStarted = false;\r\n        for (let i = 0; i < games.length; i++) {\r\n            for (let k = 0; k < games[i][\"game_\" + (i + 1)].sides.length; k++) {\r\n                if (games[i][\"game_\" + (i + 1)].sides[k].selected) {\r\n                    hasStarted = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (hasStarted) {\r\n                break;\r\n            }\r\n        }\r\n        draft.isStarted = hasStarted;\r\n    })\r\n}\r\nconst EmptyEditingIndexSlip = (state, action) => {\r\n    return produce(state, draft => {\r\n        const editSlip = _.cloneDeep(state.slips[state.editIndex]);\r\n        const games = editSlip[\"slip_\" + (state.editIndex + 1)].games;\r\n\r\n        const side = { selected: false };\r\n        const len = 3;\r\n        for (let i = 0; i < games.length; i++) {\r\n            for (let k = 0; k < len; k++) {\r\n                games[i][\"game_\" + (i + 1)].sides.push(side);\r\n            }\r\n            games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\r\n        }\r\n        editSlip[\"slip_\" + (state.editIndex + 1)].games = games;\r\n        editSlip.purchasable = false;\r\n        editSlip.slipPrice = 0;\r\n\r\n        draft.slips[state.editIndex] = Object.assign({}, editSlip);\r\n        draft.purchaseAll = false;\r\n        draft.totalPrice = 0;\r\n        draft.isStarted = true;\r\n        draft.isPaying = false;\r\n        draft.isPaid = false;\r\n        draft.isShowReceipt = false;\r\n\r\n    });\r\n}\r\n\r\nconst checkPurchasable = (state, action) => {\r\n\r\n    return produce(state, draft => {\r\n        let purchasable = true;\r\n\r\n        const slip = state.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)];\r\n        for (let i = 0; i < slip.games.length; i++) {\r\n            const isPurse = sideIsValid(slip.games[i][\"game_\" + (i + 1)].sides);\r\n            if (!isPurse) {\r\n                purchasable = false;\r\n                break;\r\n            }\r\n        }\r\n        draft.slips[action.slipIndex].purchasable = purchasable;\r\n    });\r\n}\r\n\r\nconst copyBetslip = (state, action) => {\r\n    return produce(state, draft => {\r\n        const oldId = \"slip_\" + (action.position + 1);\r\n        const newId = \"slip_\" + (draft.slips.length + 1);\r\n        let slip = _.cloneDeep(draft.slips[action.position]);\r\n        let newslip = _.cloneDeep(draft.slips[action.position][oldId]);\r\n        draft.slips.splice(draft.slips.length, 0, {\r\n            id: newId, purchasable: true, slipAmount: slip.slipAmount, basePrice: slip.basePrice,\r\n            slipPrice: state.slips[action.position].slipPrice, adding: false,\r\n            removing: false, [newId]: newslip\r\n        });\r\n\r\n        draft.slips[draft.slips.length - 1].gameNumber = uuid();\r\n        draft.slips[draft.slips.length - 1].gameDate = slip.gameDate;\r\n        draft.isPaying = false;\r\n        draft.isPaid = false;\r\n        draft.isShowReceipt = false;\r\n\r\n    });\r\n}\r\n\r\n\r\nconst addEmptySlip = (state, action) => {\r\n    return produce(state, draft => {\r\n        const clonedSlips = _.cloneDeep(state.slips);\r\n        let lastLength = state.slips.length;\r\n        const clonedSlip = clonedSlips[lastLength - 1];\r\n        let oldId = clonedSlip.id;\r\n        let newId = \"slip_\" + (parseInt((oldId.split('_')[1])) + 1);\r\n        const games = clonedSlip[\"slip_\" + lastLength].games;\r\n        const side = { selected: false };\r\n        const len = 3;\r\n        for (let i = 0; i < games.length; i++) {\r\n            for (let k = 0; k < len; k++) {\r\n                games[i][\"game_\" + (i + 1)].sides.push(side);\r\n            }\r\n            games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\r\n            games[i].amount = 0;\r\n        }\r\n        clonedSlip.purchasable = false;\r\n        clonedSlip.adding = false;\r\n        clonedSlip.removing = false;\r\n        clonedSlip.slipPrice = 0;\r\n        clonedSlip.gameDate = draft.gameDate;\r\n        clonedSlip.gameNumber = uuid();\r\n        clonedSlip.basePrice = action.basePrice;\r\n        clonedSlip.id = newId;\r\n        clonedSlip[newId] = clonedSlip[oldId];\r\n        delete [clonedSlip[oldId]];\r\n\r\n        draft.slips.splice(lastLength, 1, clonedSlip);\r\n        draft.isPaying = false;\r\n        draft.isPaid = false;\r\n        draft.isShowReceipt = false;\r\n\r\n    });\r\n}\r\n\r\nconst deleteAndResetAll = (state, action) => {\r\n    return produce(state, draft => {\r\n        const clonedSlips = _.cloneDeep(state.slips);\r\n\r\n        if (state.slips.length > 1) {\r\n            clonedSlips.splice(1, state.slips.length);\r\n        }\r\n\r\n        if (clonedSlips.length <= 1) {\r\n            const games = _.cloneDeep(clonedSlips[0][\"slip_1\"].games);\r\n            const side = { selected: false };\r\n            const len = 3;\r\n            for (let i = 0; i < games.length; i++) {\r\n                for (let k = 0; k < len; k++) {\r\n                    games[i][\"game_\" + (i + 1)].sides.push(side);\r\n                    games[i].amount = 0;\r\n                }\r\n                games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\r\n            }\r\n\r\n            clonedSlips[0][\"slip_1\"].games = games;\r\n            clonedSlips[0].purchasable = false\r\n            clonedSlips[0].slipPrice = 0;\r\n            clonedSlips[0].slipAmount = 0;\r\n            clonedSlips[0].gameNumber = uuid();\r\n\r\n        }\r\n\r\n\r\n        draft.slips = _.cloneDeep(clonedSlips);\r\n        draft.totalPrice = 0;\r\n        draft.purchaseAll = false;\r\n        draft.isPaying = false;\r\n        draft.isShowReceipt = false;\r\n        draft.editIndex = 0;\r\n\r\n\r\n    })\r\n}\r\n\r\nconst toggleSelectedTile = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.slips[action.slipIndex][\"slip_\" + (action.slipIndex + 1)]\r\n            .games[action.gameIndex]['game_' + (action.gameIndex + 1)]\r\n            .sides[action.sideIndex].selected = !action.side;\r\n        draft.isPaying = false;\r\n        draft.isPaid = false;\r\n        draft.isShowReceipt = false;\r\n\r\n    });\r\n}\r\n\r\nconst calulateGameAmount = (state, action) => {\r\n    return produce(state, draft => {\r\n        let side = draft.slips[action.slipIndex][\"slip_\" +\r\n            (action.slipIndex + 1)]\r\n            .games[action.gameIndex]['game_' + (action.gameIndex + 1)]\r\n            .sides[action.sideIndex].selected;\r\n        let game = draft.slips[action.slipIndex][\"slip_\"\r\n            + (action.slipIndex + 1)]\r\n            .games[action.gameIndex];\r\n\r\n        if (side) {\r\n            game.amount += 1;\r\n        } else {\r\n            game.amount -= 1;\r\n        }\r\n\r\n    });\r\n}\r\n\r\nconst calculateGrandTtoalPriceOfAllSlips = (state, action) => {\r\n    return produce(state, draft => {\r\n        let slips = state.slips;\r\n        let totalPrice = 0;\r\n        slips.forEach((slip, i) => {\r\n            if (slip.purchasable)\r\n                totalPrice += slip.slipPrice;\r\n        });\r\n\r\n        draft.totalPrice = totalPrice;\r\n    })\r\n}\r\nconst removeRowFromBetSlip = (state, action) => {\r\n    return produce(state, draft => {\r\n        if (draft.slips.length > 1) {\r\n            const clonedSlips = _.cloneDeep(draft.slips);\r\n            let len = clonedSlips.length;\r\n            let initialPrice = clonedSlips[action.deleteId].slipPrice;\r\n\r\n            let remainderLen = len - action.deleteId - 1;\r\n            clonedSlips.splice(action.deleteId, 1);\r\n            let newId = \"slip_\";\r\n            let oldId = \"slip_\";\r\n            for (let i = 0; i < remainderLen; i++) {\r\n                let k = i + action.deleteId;\r\n                newId += (k + 1);\r\n                oldId += (k + 2);\r\n                clonedSlips[k].id = newId;\r\n                clonedSlips[k][newId] = clonedSlips[k][oldId];\r\n                delete (clonedSlips[k][oldId]);\r\n                newId = 'slip_';\r\n                oldId = \"slip_\";\r\n            }\r\n            draft.slips = _.cloneDeep(clonedSlips);\r\n            draft.totalPrice -= initialPrice;\r\n        } else {\r\n            const games = _.cloneDeep(state.slips[0][\"slip_1\"].games);\r\n            if (state.slips.length <= 1) {\r\n\r\n                const side = { selected: false };\r\n                const len = 3;\r\n                for (let i = 0; i < games.length; i++) {\r\n                    for (let k = 0; k < len; k++) {\r\n                        games[i][\"game_\" + (i + 1)].sides.push(side);\r\n                    }\r\n                    games[i][\"game_\" + (i + 1)].sides.splice(0, 3);\r\n                }\r\n                draft.slips[0][\"slip_1\"].games = games;\r\n                draft.slips[0].purchasable = false\r\n                draft.totalPrice = 0;\r\n            }\r\n        }\r\n        draft.isPaying = false;\r\n        draft.isPaid = false;\r\n        draft.isShowReceipt = false;\r\n\r\n    });\r\n\r\n}\r\n\r\nconst setEditIndex = (state, action) => {\r\n    return {\r\n        ...state,\r\n        editIndex: action.position,\r\n        isPaying: false,\r\n        isPaid: false,\r\n        isShowReceipt: false,\r\n    }\r\n}\r\n\r\nconst setAdding = (state, action) => {\r\n    return produce(state, draft => {\r\n        draft.slips[action.slipIndex].adding = action.isAdded\r\n    })\r\n}\r\n\r\nconst setRemoving = (state, action) => {\r\n    return produce(state, draft => {\r\n\r\n        draft.slips[action.slipIndex].removing = action.removing\r\n    })\r\n}\r\n\r\nconst sideIsValid = (sides) => {\r\n    let allValid = false;\r\n    for (let side of sides) {\r\n        if (side.selected === true) {\r\n            allValid = true;\r\n            break;\r\n        }\r\n    }\r\n    return allValid;\r\n}\r\n\r\nconst setPurchaseAll = (state, action) => {\r\n    return produce(state, draft => {\r\n        let purchase = true;\r\n        for (let i = 0; i < state.slips.length; i++) {\r\n            let purchasable = true;\r\n            const slip = state.slips[i][\"slip_\" + (i + 1)];\r\n            for (let k = 0; k < slip.games.length; k++) {\r\n                const isPurse = sideIsValid(slip.games[k][\"game_\" + (k + 1)].sides);\r\n                if (!isPurse) {\r\n                    purchasable = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!purchasable) {\r\n                purchase = false;\r\n                break;\r\n            }\r\n        }\r\n        draft.purchaseAll = purchase;\r\n\r\n    })\r\n}\r\n\r\n\r\nconst reducer = (state = initialStte, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.RESET_BOARD:\r\n            return resetReduxBoard(state, action);\r\n        case actionTypes.SET_BOARD_LOADING:\r\n            return setBoardLoading(state, action);\r\n        case actionTypes.TOGGLE_SHOWFUNDS:\r\n            return toggleShowFunds(state, action);\r\n        case actionTypes.TOGGLE_SHOW_RECEIPT:\r\n            return toggleIsShowReceipt(state, action);\r\n        case actionTypes.SET_RECEIPT:\r\n            return setReceipt(state, action);\r\n        case actionTypes.CALCULATE_EDIT_INDEX_PRICE:\r\n            return calculateSpecificSlipPrice(state, action);\r\n        case actionTypes.SET_ISPAID:\r\n            return setIsPaid(state, action);\r\n        case actionTypes.SET_ISPAYING:\r\n            return setIsPaying(state, action);\r\n        case actionTypes.TOGGLE_SHOW_HISTORY:\r\n            return toggleShowHistory(state, action);\r\n        case actionTypes.CHECK_HAS_STARED:\r\n            return checkHasStartedPlaying(state, action);\r\n        case actionTypes.EMPTY_EDITING_SLIP:\r\n            return EmptyEditingIndexSlip(state, action);\r\n        case actionTypes.INITIALIZE_BOARD:\r\n            return initializeBoard(state, action);\r\n        case actionTypes.ADD_EMPTY_SLIP:\r\n            return addEmptySlip(state, action);\r\n        case actionTypes.SET_EDITING_INDEX:\r\n            return setEditIndex(state, action);\r\n        case actionTypes.SET_ADDING:\r\n            return setAdding(state, action);\r\n        case actionTypes.SET_REMOVING:\r\n            return setRemoving(state, action);\r\n        case actionTypes.TOGGLE_SELECTED_TILE:\r\n            return toggleSelectedTile(state, action);\r\n        case actionTypes.COPY_BETSLIP:\r\n            return copyBetslip(state, action);\r\n        case actionTypes.REMOVE_ROW_FROM_BETSLIP:\r\n            return removeRowFromBetSlip(state, action);\r\n        case actionTypes.CHECK_PURCHASABLE:\r\n            return checkPurchasable(state, action);\r\n        case actionTypes.PURCHASE_ALL:\r\n            return setPurchaseAll(state, action);\r\n        case actionTypes.DELETE_AND_RESET_ALL:\r\n            return deleteAndResetAll(state, action);\r\n        case actionTypes.CALCULATE_SLIP_PRICE:\r\n            return calulateGameAmount(state, action);\r\n        case actionTypes.CALCULATE_GRAND_tOTAL:\r\n            return calculateGrandTtoalPriceOfAllSlips(state, action);\r\n        case actionTypes.GENERATE_SLIP:\r\n            return generateSlip(state, action);\r\n        case actionTypes.SET_SHOW_FUNDS:\r\n            return setShowFunds(state, action);\r\n        case actionTypes.SET_ISTOWALLET:\r\n            return setIsToWallet(state, action);\r\n        case actionTypes.TOGGLE_SHOW_RECEIPT_HISTORY:\r\n            return toggleReceiptShowHistory(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}
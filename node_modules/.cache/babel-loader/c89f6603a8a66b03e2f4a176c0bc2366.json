{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Emma\\\\Documents\\\\GitHub\\\\Emp\\\\sports-lottery\\\\src\\\\components\\\\Payments\\\\ToBank\\\\ToBank.js\";\nimport React, { Component } from \"react\";\nimport './ToBank.module.css';\nimport classes from \"./ToBank.module.css\";\nimport axios from '../../../axios-paystack';\nimport DeleteBankDetails from \"./DeletBankDetails/DeleteBankDetails\";\nimport SignupModal from \"../../UI/SignupModal/SignupModoal\";\nimport { Spinner } from \"react-bootstrap\";\nimport firebase from '../../../config/firebase/firebase';\nimport * as actions from '../../../store/actions/index';\nimport { connect } from \"react-redux\";\nimport ConfirmPassword from '../ToBank/ConfirmPassword/ConfirmPassword';\nimport Modal from '../../UI/Modal/Modal';\nimport { Button } from 'react-bootstrap';\n\nclass ToBank extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"\",\n      amount: '',\n      account: \"\",\n      bank: '',\n      funds: 0,\n      formErrors: {},\n      config: {},\n      apiError: '',\n      saveError: '',\n      showUpdate: '',\n      checkMessage: '',\n      showReSigninForm: false,\n      isWithDraw: false,\n      loding: false\n    };\n\n    this.handleChange = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n\n      if (name === \"account\") {\n        value = value.replace(/[^0-9]+/, '');\n        this.setState({\n          account: value\n        });\n      }\n\n      const ele = document.activeElement.name;\n      let error = {};\n      if (ele === \"account\") error[\"accountErr\"] = this.validateAccount(value).error;\n      if (ele === \"amount\") error[\"amountErr\"] = this.validateAmount(value).error;\n      if (ele === \"account\") error[\"bankErr\"] = this.validateBank(value).error;\n      this.setState({\n        formErrors: error\n      });\n    };\n\n    this.handlePaystackSuccessAction = reference => {\n      firebase.database().onAuthStateChanged(user => {\n        if (user && user.emailVerified) {\n          user.funds += this.state.amount;\n          let updates = {};\n          updates[\"users/\" + user.uid] = user;\n          firebase.database().ref().update(updates);\n        }\n      });\n      firebase.database().ref(\"users\").off();\n    };\n\n    this.handlePaystackCloseAction = () => {\n      // implementation for  whatever you want to do when the Paystack dialog closed.\n      console.log('closed');\n    };\n\n    this.handleSubmit2 = e => {\n      e.preventDefault();\n      let bankDetails = [...this.props.savedBanks];\n      let cardTobeSaved = bankDetails.filter(detail => detail.accountNumber === e.target.value)[0];\n      if (cardTobeSaved.accountNumber !== \"--Use an exisitng bank--\") this.setState({\n        account: cardTobeSaved.accountNumber\n      });else this.setState({\n        account: \"\"\n      });\n      this.setState({\n        bank: cardTobeSaved.bank\n      });\n      this.setState({\n        name: cardTobeSaved.accountName\n      });\n      this.setState({\n        savedAccountNumber: e.target.value\n      });\n      this.setState({\n        saveError: \"\"\n      });\n      this.setState({\n        checkMessage: \"\"\n      });\n      this.setState({\n        apiError: \"\"\n      });\n    };\n\n    this.handleWithdraw = () => {\n      const receipntData = {\n        type: \"nuban\",\n        name: this.state.name,\n        account_number: this.state.account,\n        bank_code: this.state.bank,\n        currency: \"NGN\"\n      };\n      const params = \"account_number=\" + this.state.account + \"&bank_code=\" + this.state.bank;\n\n      if (this.state.amount <= this.state.funds && this.state.amount > 0) {\n        axios.get(\"bank/resolve?\" + params).then(response => {\n          if (response.data.message === \"Account number resolved\") {\n            axios.post(\"transferrecipient\", receipntData).then(response => {\n              if (response.data.message === \"Transfer recipient created successfully\") {\n                return response.data.data;\n              }\n            }).then(value => {\n              const paymentData = {\n                source: \"balance\",\n                amount: \"\" + this.state.amount * 100,\n                recipient: value.recipient_code,\n                reason: \"Returns from BetSoka account\"\n              };\n              axios.post(\"transfer\", paymentData).then(response => {\n                if (response.data.data.status === \"success\") {\n                  let userId = firebase.auth().currentUser.uid;\n                  let userRef = firebase.database().ref(\"users\").child(userId);\n                  userRef.child('funds').transaction(funds => {\n                    this.props.onSetFunds(funds - Number(this.state.amount));\n                    return funds - Number(this.state.amount);\n                  });\n                  alert(`${response.data.message}. Funds wull be received within 24 hours.`);\n                }\n              }).catch(error => {\n                this.setState({\n                  apiError: error,\n                  saveError: ''\n                });\n              });\n            }).catch(error => {\n              this.setState({\n                apiError: error,\n                saveError: ''\n              });\n            });\n          }\n        }).catch(error => {\n          this.setState({\n            apiError: error,\n            saveError: ''\n          });\n        });\n      }\n\n      firebase.database().ref(\"users\").off();\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        saveError: \"\"\n      });\n      this.setState({\n        checkMessage: \"\"\n      });\n      this.setState({\n        apiError: \"\"\n      });\n      let bankDetail = [...this.props.savedBanks];\n\n      if (this.handleFormValidation()) {\n        let BankExist = bankDetail.find(detail => detail.accountNumber === this.state.account);\n\n        if (BankExist) {\n          this.handleWithdraw();\n        } else {\n          this.setState({\n            showReSigninForm: true\n          });\n          this.setState({\n            isWithDraw: true\n          });\n        }\n      }\n    };\n\n    this.handleSaveHandler = e => {\n      e.preventDefault();\n      this.setState({\n        saveError: \"\"\n      });\n      this.setState({\n        checkMessage: \"\"\n      });\n      this.setState({\n        apiError: \"\"\n      });\n      let bankDetail = [...this.props.savedBanks];\n\n      if (this.saveBankValidation()) {\n        let BankExist = bankDetail.find(detail => detail.accountNumber === this.state.account);\n\n        if (BankExist) {\n          alert(\"Account already saved\");\n        } else {\n          this.setState({\n            showReSigninForm: true\n          });\n        }\n      }\n    };\n\n    this.checkBankAccount = e => {\n      e.preventDefault();\n      this.setState({\n        saveError: \"\"\n      });\n      this.setState({\n        checkMessage: \"\"\n      });\n      this.setState({\n        apiError: \"\"\n      });\n      let account = this.state.account;\n      let bank = this.state.bank;\n\n      if (account && bank !== 'select') {\n        this.setState({\n          name: ''\n        });\n        const params = \"account_number=\" + account + \"&bank_code=\" + bank;\n        axios.get(\"bank/resolve?\" + params).then(response => {\n          this.setState({\n            name: response.data.data.account_name\n          });\n          this.setState({\n            checkMessage: 'Account Found'\n          });\n        }).catch(err => {\n          this.setState({\n            checkMessage: 'Account Not Found'\n          });\n        });\n      } else {\n        this.setState({\n          saveError: \"Please enter: bank and account to proceed\",\n          apiError: ''\n        });\n      }\n    };\n\n    this.HandleSave = () => {\n      let bankDetail = [...this.props.savedBanks];\n      let account = this.state.account;\n      let bank = this.state.bank;\n      firebase.auth().onAuthStateChanged(user => {\n        if (user && user.emailVerified) {\n          // User is signed in.\n          if (account && bank !== 'select') {\n            let BankExist = bankDetail.find(detail => detail.accountNumber === account);\n\n            if (!BankExist) {\n              const params = \"account_number=\" + account + \"&bank_code=\" + bank;\n              axios.get(\"bank/resolve?\" + params).then(response => {\n                if (response.data.message === \"Account number resolved\") {\n                  const accountDetail = {\n                    accountName: response.data.data.account_name,\n                    bank: bank,\n                    accountNumber: account\n                  };\n                  firebase.database().ref('bank-accounts/' + user.uid + \"/\" + accountDetail.accountNumber).set(accountDetail);\n                  var accountRef = firebase.database().ref('bank-accounts/' + user.uid);\n                  accountRef.on('value', snapshot => {\n                    const data = snapshot.val();\n                    this.props.onResetSavedBanks(data);\n                  });\n                  this.setState({\n                    saveError: '',\n                    apiError: ''\n                  });\n                  alert(\"Bank details saved!\");\n                  setTimeout(() => {\n                    window.location.reload(false);\n                  }, 2500);\n                } else {\n                  this.setState({\n                    saveError: \"Please check your card details\",\n                    apiError: ''\n                  });\n                }\n              }).catch(error => {\n                this.setState({\n                  saveError: \"Please check your card details\",\n                  apiError: ''\n                });\n              });\n            } else {\n              this.setState({\n                saveError: \"That bank detail already exists\",\n                apiError: ''\n              });\n            }\n          } else {\n            this.setState({\n              saveError: \"Please enter: valid name, bank and account to proceed\",\n              apiError: ''\n            });\n          }\n        }\n      });\n      firebase.database().ref('bank-accounts').off();\n    };\n\n    this.setShowUpdate = value => {\n      this.setState({\n        showUpdate: value\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.loading) {\n      this.props.onFetchBanks();\n      this.setState({\n        funds: this.props.user.funds\n      });\n    }\n\n    this.setState({\n      loading: true\n    });\n  }\n\n  validateAccount(account) {\n    let formIsValid = true;\n    let error = \"\"; //Account\n\n    if (!account) {\n      formIsValid = false;\n      error = \"Account number is required.\";\n    }\n\n    return {\n      isValid: formIsValid,\n      error: error\n    };\n  }\n\n  validateAmount(amount) {\n    let formIsValid = true;\n    let error = \"\";\n\n    if (!amount) {\n      formIsValid = false;\n      error = \"Amount is required.\";\n    } else {\n      if (Number(amount) < 500) {\n        formIsValid = false;\n        error = \"Minimum amount allowed is 500\";\n      }\n\n      if (Number(amount) > this.state.funds) {\n        formIsValid = false;\n        error = \"Withdrawal amount is more than your funds. correct\";\n      }\n    }\n\n    return {\n      isValid: formIsValid,\n      error: error\n    };\n  }\n\n  validateBank(bank) {\n    let formIsValid = true;\n    let error = \"\";\n\n    if (bank === '' || bank === \"select\") {\n      formIsValid = false;\n      error = \"Select bank.\";\n    }\n\n    return {\n      isValid: formIsValid,\n      error: error\n    };\n  }\n\n  handleFormValidation() {\n    const {\n      amount,\n      account,\n      bank\n    } = this.state;\n    let formErrors = {};\n    let formIsValid = true; // Account\n\n    formIsValid = this.validateAccount(account).isValid && formIsValid;\n    formErrors[\"accountErr\"] = this.validateAccount(account).error; //Amount    \n\n    formIsValid = this.validateAmount(amount).isValid && formIsValid;\n    formErrors[\"amountErr\"] = this.validateAmount(amount).error; //Bank\n\n    formIsValid = this.validateBank(bank).isValid && formIsValid;\n    formErrors[\"bankErr\"] = this.validateBank(bank).error;\n    this.setState({\n      formErrors: formErrors\n    });\n    this.setState({\n      formErrors: formErrors\n    });\n    return formIsValid;\n  }\n\n  saveBankValidation() {\n    const {\n      account,\n      bank\n    } = this.state;\n    let formErrors = {};\n    let formIsValid = true;\n\n    if (!account) {\n      formIsValid = false;\n      formErrors[\"accountErr\"] = \"Account number is required.\";\n    } //Bank\n\n\n    if (bank === '' || bank === \"select\") {\n      formIsValid = false;\n      formErrors[\"bankErr\"] = \"Select bank.\";\n    }\n\n    this.setState({\n      formErrors: formErrors\n    });\n    this.setState({\n      formErrors: formErrors\n    });\n    return formIsValid;\n  }\n\n  render() {\n    const {\n      amountErr,\n      accountErr,\n      bankErr\n    } = this.state.formErrors;\n    const banks = [classes.Banks];\n\n    if (bankErr) {\n      banks.push(classes.showError);\n    }\n\n    const banksExist = [classes.BanksExist];\n    let bankDetails;\n    let options;\n    let banksallowed;\n    let optionsAllowed;\n\n    if (this.state.loading) {\n      bankDetails = [...this.props.savedBanks];\n      options = bankDetails.sort((a, b) => a.accountNumber > b.accountNumber ? 1 : -1).map((detail, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: detail.accountNumber,\n        children: detail.accountNumber\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }, this));\n      banksallowed = [...this.props.allowedBanks];\n      optionsAllowed = banksallowed.sort((a, b) => a.bankName > b.bankName ? 1 : -1).map((detail, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: detail.bankCode,\n        children: detail.bankName\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ToBankWrapper,\n      children: [this.state.showReSigninForm ? /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.showReSigninForm,\n        children: /*#__PURE__*/_jsxDEV(ConfirmPassword, {\n          handleWithdraw: this.handleWithdraw,\n          isWithDraw: this.state.isWithDraw,\n          cancel: () => this.setState({\n            showReSigninForm: false\n          }),\n          HandleSave: this.HandleSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 90\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 48\n      }, this) : null, this.state.showUpdate ? /*#__PURE__*/_jsxDEV(SignupModal, {\n        show: this.state.showUpdate,\n        children: /*#__PURE__*/_jsxDEV(DeleteBankDetails, {\n          showUpdate: () => this.setState({\n            showUpdate: false\n          }),\n          name: this.state.name,\n          bank: this.state.bank,\n          account: this.state.account,\n          allowedBanks: this.props.allowedBanks,\n          savedBanks: this.props.savedBanks,\n          setShowUpdate: this.setShowUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 42\n      }, this) : this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [this.state.apiError ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '20px'\n            },\n            children: \"Please check your bank details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 52\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"savedAccountNumber\",\n              value: this.state.savedAccountNumber,\n              onChange: this.handleSubmit2,\n              multiple: false,\n              className: banksExist.join(\" \"),\n              children: options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"amount\",\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"amount\",\n                onChange: this.handleChange,\n                value: this.state.amount,\n                placeholder: \"Amount: 500 Naira minimum\",\n                className: classes.Number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 37\n              }, this), amountErr && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: \"red\"\n                },\n                children: amountErr\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"bank\",\n                children: \"Bank:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"bank\",\n                value: this.state.bank,\n                onChange: this.handleChange,\n                className: banks.join(\" \"),\n                children: optionsAllowed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 37\n              }, this), bankErr && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: \"red\",\n                  paddingBottom: 10\n                },\n                children: bankErr\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"name\",\n                children: \"Account\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"account\",\n                value: this.state.account,\n                onChange: this.handleChange,\n                maxLength: \"10\",\n                placeholder: \"Account Number\",\n                className: classes.Number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 37\n              }, this), accountErr && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: \"red\"\n                },\n                children: accountErr\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 41\n              }, this), this.state.saveError ? /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '20px'\n                },\n                children: this.state.saveError\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 61\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.Verify,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.VerifyButton,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"info\",\n                  onClick: this.checkBankAccount,\n                  children: \"Verify Account Details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 75\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: this.state.checkMessage.includes(\"Not\") ? classes.RedMsg : classes.NormalMsg,\n                children: this.state.checkMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"name\",\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                value: this.state.name,\n                onChange: this.handleChange,\n                disabled: true,\n                placeholder: \"Your Name: will appear here\",\n                className: classes.Text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 33\n            }, this), this.state.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.Buttons,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: this.handleSaveHandler,\n                className: classes.Button1,\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 41\n              }, this), this.state.name && this.state.bank !== \"select\" && this.state.account ? /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: classes.Button2,\n                onClick: () => this.setShowUpdate(true),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 45\n              }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: classes.Submit,\n                children: \"Withdraw\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 37\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 42\n      }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    savedBanks: state.banks.savedBanks,\n    allowedBanks: state.banks.allowedBanks\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchBanks: () => dispatch(actions.fetchBanks()),\n    onResetSavedBanks: payload => dispatch(actions.resetSavedBanks(payload)),\n    onSetFunds: funds => dispatch(actions.setFunds(funds))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToBank);","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/components/Payments/ToBank/ToBank.js"],"names":["React","Component","classes","axios","DeleteBankDetails","SignupModal","Spinner","firebase","actions","connect","ConfirmPassword","Modal","Button","ToBank","state","name","amount","account","bank","funds","formErrors","config","apiError","saveError","showUpdate","checkMessage","showReSigninForm","isWithDraw","loding","handleChange","e","value","target","setState","replace","ele","document","activeElement","error","validateAccount","validateAmount","validateBank","handlePaystackSuccessAction","reference","database","onAuthStateChanged","user","emailVerified","updates","uid","ref","update","off","handlePaystackCloseAction","console","log","handleSubmit2","preventDefault","bankDetails","props","savedBanks","cardTobeSaved","filter","detail","accountNumber","accountName","savedAccountNumber","handleWithdraw","receipntData","type","account_number","bank_code","currency","params","get","then","response","data","message","post","paymentData","source","recipient","recipient_code","reason","status","userId","auth","currentUser","userRef","child","transaction","onSetFunds","Number","alert","catch","handleSubmit","bankDetail","handleFormValidation","BankExist","find","handleSaveHandler","saveBankValidation","checkBankAccount","account_name","err","HandleSave","accountDetail","set","accountRef","on","snapshot","val","onResetSavedBanks","setTimeout","window","location","reload","setShowUpdate","componentDidMount","loading","onFetchBanks","formIsValid","isValid","render","amountErr","accountErr","bankErr","banks","Banks","push","showError","banksExist","BanksExist","options","banksallowed","optionsAllowed","sort","a","b","map","i","allowedBanks","bankName","bankCode","ToBankWrapper","color","fontSize","join","label","paddingBottom","Verify","VerifyButton","includes","RedMsg","NormalMsg","Text","Buttons","Button1","Button2","Submit","mapStateToProps","mapDispatchToProps","dispatch","fetchBanks","payload","resetSavedBanks","setFunds"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport './ToBank.module.css'\r\nimport classes from \"./ToBank.module.css\";\r\nimport axios from '../../../axios-paystack';\r\nimport DeleteBankDetails from \"./DeletBankDetails/DeleteBankDetails\";\r\nimport SignupModal from \"../../UI/SignupModal/SignupModoal\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport firebase from '../../../config/firebase/firebase';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { connect } from \"react-redux\";\r\nimport ConfirmPassword from '../ToBank/ConfirmPassword/ConfirmPassword';\r\nimport Modal from '../../UI/Modal/Modal';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass ToBank extends Component {\r\n    state = {\r\n        name: \"\",\r\n        amount: '',\r\n        account: \"\",\r\n        bank: '',\r\n        funds: 0,\r\n        formErrors: {},\r\n        config: {},\r\n        apiError: '',\r\n        saveError: '',\r\n        showUpdate: '',\r\n        checkMessage: '',\r\n        showReSigninForm: false,\r\n        isWithDraw: false,\r\n        loding: false,\r\n    }\r\n    componentDidMount() {\r\n        if (!this.state.loading) {\r\n            this.props.onFetchBanks();\r\n            this.setState({ funds: this.props.user.funds })\r\n        }\r\n        this.setState({ loading: true })\r\n    }\r\n    validateAccount(account) {\r\n        let formIsValid = true;\r\n        let error = \"\";\r\n        //Account\r\n        if (!account) {\r\n            formIsValid = false;\r\n            error = \"Account number is required.\";\r\n        }\r\n        return { isValid: formIsValid, error: error }\r\n    }\r\n    validateAmount(amount) {\r\n        let formIsValid = true;\r\n        let error = \"\";\r\n        if (!amount) {\r\n            formIsValid = false;\r\n            error = \"Amount is required.\";\r\n        }\r\n        else {\r\n            if (Number(amount) < 500) {\r\n                formIsValid = false;\r\n                error = \"Minimum amount allowed is 500\";\r\n            }\r\n            if (Number(amount) > this.state.funds) {\r\n                formIsValid = false;\r\n                error = \"Withdrawal amount is more than your funds. correct\";\r\n            }\r\n        }\r\n        return { isValid: formIsValid, error: error }\r\n    }\r\n\r\n    validateBank(bank) {\r\n        let formIsValid = true;\r\n        let error = \"\";\r\n        if (bank === '' || bank === \"select\") {\r\n            formIsValid = false;\r\n            error = \"Select bank.\";\r\n        }\r\n        return { isValid: formIsValid, error: error }\r\n    }\r\n\r\n    handleFormValidation() {\r\n        const { amount, account, bank } = this.state;\r\n        let formErrors = {};\r\n        let formIsValid = true;\r\n        // Account\r\n        formIsValid = this.validateAccount(account).isValid && formIsValid;\r\n        formErrors[\"accountErr\"] = this.validateAccount(account).error;\r\n        //Amount    \r\n        formIsValid = this.validateAmount(amount).isValid && formIsValid;\r\n        formErrors[\"amountErr\"] = this.validateAmount(amount).error;\r\n        //Bank\r\n        formIsValid = this.validateBank(bank).isValid && formIsValid;\r\n        formErrors[\"bankErr\"] = this.validateBank(bank).error;\r\n        this.setState({ formErrors: formErrors });\r\n        this.setState({ formErrors: formErrors });\r\n        return formIsValid;\r\n    }\r\n\r\n    saveBankValidation() {\r\n        const { account, bank } = this.state;\r\n        let formErrors = {};\r\n        let formIsValid = true;\r\n        if (!account) {\r\n            formIsValid = false;\r\n            formErrors[\"accountErr\"] = \"Account number is required.\";\r\n        }\r\n        //Bank\r\n        if (bank === '' || bank === \"select\") {\r\n            formIsValid = false;\r\n            formErrors[\"bankErr\"] = \"Select bank.\";\r\n        }\r\n        this.setState({ formErrors: formErrors });\r\n        this.setState({ formErrors: formErrors });\r\n        return formIsValid;\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n        if (name === \"account\") {\r\n            value = value.replace(/[^0-9]+/, '');\r\n            this.setState({ account: value });\r\n        }\r\n        const ele = document.activeElement.name;\r\n        let error = {};\r\n        if (ele === \"account\")\r\n            error[\"accountErr\"] = this.validateAccount(value).error;\r\n        if (ele === \"amount\")\r\n            error[\"amountErr\"] = this.validateAmount(value).error;\r\n        if (ele === \"account\")\r\n            error[\"bankErr\"] = this.validateBank(value).error;\r\n        this.setState({ formErrors: error })\r\n    }\r\n\r\n    handlePaystackSuccessAction = (reference) => {\r\n        firebase.database().onAuthStateChanged((user) => {\r\n            if (user && user.emailVerified) {\r\n                user.funds += this.state.amount;\r\n                let updates = {};\r\n                updates[\"users/\" + user.uid] = user;\r\n                firebase.database().ref().update(updates);\r\n            }\r\n        })\r\n        firebase.database().ref(\"users\").off();\r\n    };\r\n\r\n    handlePaystackCloseAction = () => {\r\n        // implementation for  whatever you want to do when the Paystack dialog closed.\r\n        console.log('closed')\r\n    }\r\n    handleSubmit2 = (e) => {\r\n        e.preventDefault();\r\n        let bankDetails = [...this.props.savedBanks];\r\n        let cardTobeSaved = bankDetails.filter(detail => detail.accountNumber === e.target.value)[0];\r\n        if (cardTobeSaved.accountNumber !== \"--Use an exisitng bank--\")\r\n            this.setState({ account: cardTobeSaved.accountNumber });\r\n        else\r\n            this.setState({ account: \"\" });\r\n        this.setState({ bank: cardTobeSaved.bank });\r\n        this.setState({ name: cardTobeSaved.accountName });\r\n        this.setState({ savedAccountNumber: e.target.value });\r\n        this.setState({ saveError: \"\" });\r\n        this.setState({ checkMessage: \"\" });\r\n        this.setState({ apiError: \"\" });\r\n    }\r\n    handleWithdraw = () => {\r\n        const receipntData = {\r\n            type: \"nuban\",\r\n            name: this.state.name,\r\n            account_number: this.state.account,\r\n            bank_code: this.state.bank,\r\n            currency: \"NGN\"\r\n        }\r\n        const params = \"account_number=\" + this.state.account + \"&bank_code=\" + this.state.bank;\r\n        if (this.state.amount <= this.state.funds && this.state.amount > 0) {\r\n            axios.get(\"bank/resolve?\" + params)\r\n                .then(response => {\r\n                    if (response.data.message === \"Account number resolved\") {\r\n                        axios.post(\"transferrecipient\", receipntData)\r\n                            .then(response => {\r\n                                if (response.data.message === \"Transfer recipient created successfully\") {\r\n                                    return response.data.data;\r\n                                }\r\n                            })\r\n                            .then(value => {\r\n                                const paymentData = {\r\n                                    source: \"balance\",\r\n                                    amount: \"\" + this.state.amount * 100,\r\n                                    recipient: value.recipient_code,\r\n                                    reason: \"Returns from BetSoka account\"\r\n                                };\r\n                                axios.post(\"transfer\", paymentData)\r\n                                    .then(response => {\r\n                                        if (response.data.data.status === \"success\") {\r\n                                            let userId = firebase.auth().currentUser.uid;\r\n                                            let userRef = firebase.database().ref(\"users\").child(userId);\r\n                                            userRef.child('funds').transaction((funds) => {\r\n                                                this.props.onSetFunds(funds - Number(this.state.amount))\r\n                                                return funds - Number(this.state.amount)\r\n                                            })\r\n                                            alert(`${response.data.message}. Funds wull be received within 24 hours.`)\r\n                                        }\r\n                                    })\r\n                                    .catch(error => {\r\n                                        this.setState({ apiError: error, saveError: '' });\r\n                                    })\r\n                            })\r\n                            .catch(error => {\r\n                                this.setState({ apiError: error, saveError: '' });\r\n                            });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ apiError: error, saveError: '' })\r\n                });\r\n        }\r\n        firebase.database().ref(\"users\").off();\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ saveError: \"\" });\r\n        this.setState({ checkMessage: \"\" });\r\n        this.setState({ apiError: \"\" });\r\n        let bankDetail = [...this.props.savedBanks];\r\n        if (this.handleFormValidation()) {\r\n            let BankExist = bankDetail.find(detail => detail.accountNumber === this.state.account);\r\n            if (BankExist) {\r\n                this.handleWithdraw();\r\n            } else {\r\n                this.setState({ showReSigninForm: true });\r\n                this.setState({ isWithDraw: true })\r\n            }\r\n        }\r\n    }\r\n    handleSaveHandler = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ saveError: \"\" });\r\n        this.setState({ checkMessage: \"\" });\r\n        this.setState({ apiError: \"\" });\r\n        let bankDetail = [...this.props.savedBanks];\r\n        if (this.saveBankValidation()) {\r\n            let BankExist = bankDetail.find(detail => detail.accountNumber === this.state.account);\r\n            if (BankExist) {\r\n                alert(\"Account already saved\");\r\n            } else {\r\n                this.setState({ showReSigninForm: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    checkBankAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ saveError: \"\" });\r\n        this.setState({ checkMessage: \"\" });\r\n        this.setState({ apiError: \"\" });\r\n        let account = this.state.account;\r\n        let bank = this.state.bank;\r\n        if (account && bank !== 'select') {\r\n            this.setState({ name: '' })\r\n            const params = \"account_number=\" + account + \"&bank_code=\"\r\n                + bank;\r\n            axios.get(\"bank/resolve?\" + params)\r\n                .then(response => {\r\n                    this.setState({ name: response.data.data.account_name });\r\n                    this.setState({ checkMessage: 'Account Found' })\r\n                })\r\n                .catch(err => {\r\n                    this.setState({ checkMessage: 'Account Not Found' })\r\n                })\r\n        } else {\r\n            this.setState({ saveError: \"Please enter: bank and account to proceed\", apiError: '' });\r\n        }\r\n    }\r\n\r\n    HandleSave = () => {\r\n        let bankDetail = [...this.props.savedBanks];\r\n        let account = this.state.account;\r\n        let bank = this.state.bank;\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user && user.emailVerified) {\r\n                // User is signed in.\r\n                if (account && bank !== 'select') {\r\n                    let BankExist = bankDetail.find(detail => detail.accountNumber === account);\r\n                    if (!BankExist) {\r\n                        const params = \"account_number=\" + account + \"&bank_code=\"\r\n                            + bank;\r\n                        axios.get(\"bank/resolve?\" + params)\r\n                            .then(response => {\r\n                                if (response.data.message === \"Account number resolved\") {\r\n                                    const accountDetail = { accountName: response.data.data.account_name, bank: bank, accountNumber: account }\r\n                                    firebase.database().ref('bank-accounts/' + user.uid + \"/\" + accountDetail.accountNumber).set(\r\n                                        accountDetail\r\n                                    );\r\n                                    var accountRef = firebase.database().ref('bank-accounts/' + user.uid);\r\n                                    accountRef.on('value', (snapshot) => {\r\n                                        const data = snapshot.val();\r\n                                        this.props.onResetSavedBanks(data);\r\n                                    });\r\n                                    this.setState({ saveError: '', apiError: '' })\r\n                                    alert(\"Bank details saved!\");\r\n                                    setTimeout(() => {\r\n                                        window.location.reload(false);\r\n                                    }, 2500);\r\n                                } else {\r\n                                    this.setState({ saveError: \"Please check your card details\", apiError: '' })\r\n                                }\r\n                            })\r\n                            .catch(error => {\r\n                                this.setState({ saveError: \"Please check your card details\", apiError: '' })\r\n                            })\r\n                    } else {\r\n                        this.setState({ saveError: \"That bank detail already exists\", apiError: '' });\r\n                    }\r\n                } else {\r\n                    this.setState({ saveError: \"Please enter: valid name, bank and account to proceed\", apiError: '' });\r\n                }\r\n            }\r\n        })\r\n        firebase.database().ref('bank-accounts').off();\r\n    }\r\n\r\n    setShowUpdate = (value) => {\r\n        this.setState({ showUpdate: value })\r\n    }\r\n\r\n    render() {\r\n        const { amountErr, accountErr, bankErr } = this.state.formErrors;\r\n        const banks = [classes.Banks];\r\n        if (bankErr) {\r\n            banks.push(classes.showError);\r\n        }\r\n        const banksExist = [classes.BanksExist];\r\n        let bankDetails;\r\n        let options;\r\n        let banksallowed;\r\n        let optionsAllowed;\r\n        if (this.state.loading) {\r\n            bankDetails = [...this.props.savedBanks];\r\n            options = bankDetails.sort((a, b) => a.accountNumber > b.accountNumber ? 1 : -1)\r\n                .map((detail, i) => (\r\n                    <option key={i} value={detail.accountNumber}>{detail.accountNumber}</option>\r\n                ));\r\n            banksallowed = [...this.props.allowedBanks];\r\n            optionsAllowed = banksallowed.sort((a, b) => a.bankName > b.bankName ? 1 : -1)\r\n                .map((detail, i) => (\r\n                    <option key={i} value={detail.bankCode}>{detail.bankName}</option>\r\n                ));\r\n        }\r\n        return (\r\n            <div className={classes.ToBankWrapper}>\r\n                {this.state.showReSigninForm ? <Modal show={this.state.showReSigninForm}><ConfirmPassword\r\n                    handleWithdraw={this.handleWithdraw} isWithDraw={this.state.isWithDraw}\r\n                    cancel={() => this.setState({ showReSigninForm: false })} HandleSave={this.HandleSave} /></Modal> : null}\r\n                {this.state.showUpdate ? <SignupModal show={this.state.showUpdate}>\r\n                    <DeleteBankDetails showUpdate={() => this.setState({ showUpdate: false })}\r\n                        name={this.state.name} bank={this.state.bank} account={this.state.account}\r\n                        allowedBanks={this.props.allowedBanks} savedBanks={this.props.savedBanks}\r\n                        setShowUpdate={this.setShowUpdate} /></SignupModal> :\r\n                    this.state.loading ? <div className=\"formDiv\">\r\n                        <div>\r\n                            {this.state.apiError ? <div style={{ color: 'red', fontSize: '20px' }}>Please check your bank details</div> : null}\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <select name=\"savedAccountNumber\"\r\n                                    value={this.state.savedAccountNumber}\r\n                                    onChange={this.handleSubmit2}\r\n                                    multiple={false}\r\n                                    className={banksExist.join(\" \")} >\r\n                                    {options}\r\n                                </select>\r\n                                <div>\r\n                                    <label className={classes.label} htmlFor=\"amount\">Amount</label>\r\n                                    <input type=\"number\" name=\"amount\"\r\n                                        onChange={this.handleChange}\r\n                                        value={this.state.amount}\r\n                                        placeholder=\"Amount: 500 Naira minimum\"\r\n                                        className={classes.Number} />\r\n                                    {amountErr &&\r\n                                        <div style={{ color: \"red\" }}>{amountErr}</div>\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    <label className={classes.label} htmlFor=\"bank\">Bank:</label>\r\n                                    <select name=\"bank\"\r\n                                        value={this.state.bank}\r\n                                        onChange={this.handleChange}\r\n                                        className={banks.join(\" \")} >\r\n                                        {optionsAllowed}\r\n                                    </select>\r\n                                    {bankErr &&\r\n                                        <div style={{ color: \"red\", paddingBottom: 10 }}>{bankErr}</div>\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    <label className={classes.label} htmlFor=\"name\">Account</label>\r\n                                    <input type=\"text\" name=\"account\"\r\n                                        value={this.state.account}\r\n                                        onChange={this.handleChange}\r\n                                        maxLength=\"10\"\r\n                                        placeholder=\"Account Number\"\r\n                                        className={classes.Number} />\r\n                                    {accountErr &&\r\n                                        <div style={{ color: \"red\" }}>{accountErr}</div>\r\n                                    }\r\n                                    {this.state.saveError ? <div style={{ color: 'red', fontSize: '20px' }}>{this.state.saveError}</div> : null}\r\n                                </div>\r\n                                <div className={classes.Verify}>\r\n                                    <div className={classes.VerifyButton}><Button variant=\"info\" onClick={this.checkBankAccount}>Verify Account Details</Button></div>\r\n                                    <div className={this.state.checkMessage.includes(\"Not\") ? classes.RedMsg : classes.NormalMsg} >{this.state.checkMessage}</div>\r\n                                </div>\r\n                                <div>\r\n                                    <label className={classes.label} htmlFor=\"name\">Name</label>\r\n                                    <input type=\"text\" name=\"name\"\r\n                                        value={this.state.name}\r\n                                        onChange={this.handleChange}\r\n                                        disabled={true}\r\n                                        placeholder=\"Your Name: will appear here\"\r\n                                        className={classes.Text} />\r\n                                </div>\r\n                                {this.state.name ?\r\n                                    <div className={classes.Buttons}>\r\n                                        <button type=\"button\" onClick={this.handleSaveHandler} className={classes.Button1}\r\n                                        >Save</button>\r\n                                        {this.state.name && this.state.bank !== \"select\" && this.state.account ?\r\n                                            <button type=\"button\" className={classes.Button2}\r\n                                                onClick={() => this.setShowUpdate(true)}\r\n                                            >Delete</button> : null}\r\n\r\n                                        <button type=\"submit\" className={classes.Submit}\r\n                                        >Withdraw</button>\r\n                                    </div>\r\n                                    : null}\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                        : <Spinner />\r\n                }\r\n            </div >\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        savedBanks: state.banks.savedBanks,\r\n        allowedBanks: state.banks.allowedBanks,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onFetchBanks: () => dispatch(actions.fetchBanks()),\r\n        onResetSavedBanks: (payload) => dispatch(actions.resetSavedBanks(payload)),\r\n        onSetFunds: (funds) => dispatch(actions.setFunds(funds))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToBank);"]},"metadata":{},"sourceType":"module"}
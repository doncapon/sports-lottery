{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Emma\\\\Documents\\\\GitHub\\\\Emp\\\\sports-lottery\\\\src\\\\components\\\\loginLogout\\\\forgotPassword\\\\forgotPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport * as actions from '../../../store/actions';\nimport classes from './forgotPassword.module.css';\nimport Modal from '../../UI/Modal/Modal';\nimport firebase from '../../../config/firebase/firebase';\n\nconst ForgotPassword = props => {\n  _s();\n\n  const [showModal, setShowModal] = useState(true);\n  const [emailId, setEmail] = useState('');\n  const [emailIdErr, setEmailErr] = useState('');\n  props.onSetIsLoggedIn(false);\n  let history = useHistory();\n\n  const handleFormValidationEmail = () => {\n    let formErrors = '';\n    let formIsValid = true; //Email    \n\n    if (!emailId) {\n      formIsValid = false;\n      formErrors = \"Email id is required.\";\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(emailId)) {\n      formIsValid = false;\n      formErrors = \"Invalid email id.\";\n    }\n\n    setEmailErr(formErrors);\n    return formIsValid;\n  };\n\n  const forgetRedirect = () => {\n    setShowModal(false);\n    history.push(\"/\");\n  };\n\n  const handleSubmitEmail = e => {\n    e.preventDefault();\n\n    if (handleFormValidationEmail()) {\n      var auth = firebase.auth();\n      auth.sendPasswordResetEmail(emailId, {\n        url: process.env.REACT_APP_HOME\n      }).then(() => {\n        // Email sent.\n        setShowModal(false);\n        history.push(\"/\");\n        alert(\"A reset link has been sent to your email.\");\n      });\n    }\n  };\n\n  const Email = [classes.Email];\n\n  if (emailIdErr) {\n    Email.push(classes.showError);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: showModal,\n    modalClosed: forgetRedirect,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.PasswordWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Request password!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.formText,\n            children: \"Enter your email: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => handleSubmitEmail(e),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.EmailWrapper,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"emailId\",\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"emailId\",\n                value: emailId,\n                onChange: e => setEmail(e.target.value),\n                placeholder: \"Your email id..\",\n                className: Email.join(\" \")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 37\n              }, this), emailIdErr && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.ErrorText,\n                children: emailIdErr\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.Buttons,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: forgetRedirect,\n                className: classes.Button1,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: classes.Submit,\n                children: \"Submit \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ForgotPassword, \"DGun4TOCRXjvjYbZebngCHcyNo0=\", false, function () {\n  return [useHistory];\n});\n\n_c = ForgotPassword;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetIsLoggedIn: value => dispatch(actions.setIsLoggedIn(value))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ForgotPassword);\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/components/loginLogout/forgotPassword/forgotPassword.js"],"names":["React","useState","useHistory","connect","actions","classes","Modal","firebase","ForgotPassword","props","showModal","setShowModal","emailId","setEmail","emailIdErr","setEmailErr","onSetIsLoggedIn","history","handleFormValidationEmail","formErrors","formIsValid","test","forgetRedirect","push","handleSubmitEmail","e","preventDefault","auth","sendPasswordResetEmail","url","process","env","REACT_APP_HOME","then","alert","Email","showError","PasswordWrapper","formText","EmailWrapper","target","value","join","ErrorText","Buttons","Button1","Submit","mapDispatchToProps","dispatch","setIsLoggedIn"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from '../../../store/actions';\r\nimport classes from './forgotPassword.module.css';\r\nimport Modal from '../../UI/Modal/Modal';\r\nimport firebase from '../../../config/firebase/firebase';\r\n\r\nconst ForgotPassword = (props) => {\r\n    const [showModal, setShowModal] = useState(true);\r\n    const [emailId, setEmail] = useState('');\r\n    const [emailIdErr, setEmailErr] = useState('');\r\n    props.onSetIsLoggedIn(false);\r\n    let history = useHistory();\r\n\r\n    const handleFormValidationEmail = () => {\r\n        let formErrors = '';\r\n        let formIsValid = true;\r\n        //Email    \r\n        if (!emailId) {\r\n            formIsValid = false;\r\n            formErrors = \"Email id is required.\";\r\n        }\r\n        else if (!(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(emailId))) {\r\n\r\n            formIsValid = false;\r\n            formErrors = \"Invalid email id.\";\r\n        }\r\n\r\n        setEmailErr(formErrors);\r\n        return formIsValid;\r\n    }\r\n    const forgetRedirect=()=>{\r\n        setShowModal(false);\r\n        history.push(\"/\");\r\n    }\r\n    const handleSubmitEmail = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (handleFormValidationEmail()) {\r\n            var auth = firebase.auth();\r\n            auth.sendPasswordResetEmail(emailId, {url: process.env.REACT_APP_HOME}).then(() => {\r\n              // Email sent.\r\n              setShowModal(false);\r\n              history.push(\"/\");\r\n              alert(\"A reset link has been sent to your email.\")\r\n            });\r\n        }\r\n\r\n    }\r\n    const Email = [classes.Email];\r\n        if(emailIdErr)\r\n        {Email.push(classes.showError)}\r\n    return (\r\n        <Modal show={showModal} modalClosed={forgetRedirect}>\r\n            <div className={classes.PasswordWrapper} >\r\n                <h5>Request password!</h5>\r\n                    <div className=\"formDiv\" >\r\n                        <div >\r\n                            <div className={classes.formText}>Enter your email: </div>\r\n                            <form onSubmit={(e) => handleSubmitEmail(e)} >\r\n                                <div className= {classes.EmailWrapper}>\r\n                                    <label htmlFor=\"emailId\">Email</label>\r\n                                    <input type=\"text\" name=\"emailId\"\r\n                                        value={emailId}\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                        placeholder=\"Your email id..\"\r\n                                        className={Email.join(\" \")}\r\n                                        />\r\n                                    {emailIdErr &&\r\n                                        <div className={classes.ErrorText}>{emailIdErr}</div>\r\n                                    }\r\n\r\n                                </div>\r\n                                <div className={classes.Buttons}>\r\n                                    <button type=\"button\" onClick={forgetRedirect} className={classes.Button1}\r\n                                    >Cancel</button>\r\n                                    <button type=\"submit\" className={classes.Submit}\r\n                                        >Submit </button>\r\n                                </div>\r\n                            </form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n    \r\n        </Modal>);\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSetIsLoggedIn: (value) => dispatch(actions.setIsLoggedIn(value)),\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(ForgotPassword);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from '../../axios-fixtures';\nimport moment from 'moment';\nimport * as actionTypes from './actionTypes';\nimport _ from 'lodash';\nimport firebase from \"../../config/firebase/firebase\";\nexport const setIsBoardSet = isBoardSet => {\n  return {\n    type: actionTypes.SET_IS_BOARD_SET,\n    isBoardSet: isBoardSet\n  };\n};\nexport const stopResultInitialize = () => {\n  return {\n    type: actionTypes.STOP_RESULT_INITIALIZE\n  };\n};\nexport const fetchWeeklyResults = payload => {\n  return {\n    type: actionTypes.FETCH_RESULTS,\n    payload: payload\n  };\n};\nexport const setEventDate = eventDate => {\n  return {\n    type: actionTypes.SET_EVENTDATE,\n    eventDate: eventDate\n  };\n};\nexport const updateBoard = (fixturesToPush, kickOffDate) => {\n  return dispatch => {\n    console.log(\"i got called here\");\n    fixturesToPush.forEach((fixture, index) => {\n      axios.get(\"fixtures/id/\" + fixture.fixture_id).then(response => {\n        firebase.database().ref(\"board\").child(kickOffDate).child(index).update({\n          status: response.data.api.fixtures[0].status\n        });\n        firebase.database().ref(\"board\").off();\n      });\n    });\n    firebase.database().ref(\"board\").off();\n    alert(\"board updated\");\n    return null;\n  };\n};\nexport const configureBoard = (isFaCup, kickOffTime, kickOffDate) => {\n  return dispatch => {\n    console.log(kickOffDate);\n    axios.get(\"fixtures/date/\" + kickOffDate).then(response => {\n      let dateTime = kickOffDate + \"T\" + kickOffTime;\n      let fixtureAtTime = response.data.api.fixtures.filter(fixture => fixture.event_date === dateTime);\n      let EnglandFixtures = fixtureAtTime.filter(fixture => fixture.league.country === \"England\");\n      let PremierShipOrFACup;\n\n      if (!isFaCup) {\n        PremierShipOrFACup = EnglandFixtures.filter(fixture => fixture.league.name === \"Premier League\");\n      } else {\n        PremierShipOrFACup = EnglandFixtures.filter(fixture => fixture.league.name === \"FA Cup\");\n      }\n\n      let Championship = EnglandFixtures.filter(fixture => fixture.league.name === \"Championship\");\n      let countWanted;\n\n      if (Championship.length + PremierShipOrFACup.length < 13) {\n        countWanted = Championship.length + PremierShipOrFACup.length;\n      } else {\n        countWanted = 13;\n      }\n\n      let premCount = 7;\n      let ChamCount = 6;\n\n      if (countWanted === 13) {\n        if (Championship.length < 6) premCount = countWanted - Championship.length;\n        if (PremierShipOrFACup.length < 7) ChamCount = countWanted - PremierShipOrFACup.length;\n      } else {\n        if (Championship.length < 5) premCount = countWanted - Championship.length;\n        if (PremierShipOrFACup < 6) ChamCount = countWanted - PremierShipOrFACup.length;\n      }\n\n      let wantedFixtures = PremierShipOrFACup.splice(0, premCount).concat(Championship.splice(0, ChamCount));\n      let countAfter = wantedFixtures.length;\n\n      if (wantedFixtures.length < 13) {\n        let leagueOneFixture = EnglandFixtures.filter(fixture => fixture.league.name === \"League One\");\n        wantedFixtures = wantedFixtures.concat(leagueOneFixture.splice(0, 13 - countAfter));\n      }\n\n      let counterAFterLeagueOne = wantedFixtures.length;\n\n      if (wantedFixtures.length < 13) {\n        let leagueTwoFixture = EnglandFixtures.filter(fixture => fixture.league.name === \"League Two\");\n        wantedFixtures = wantedFixtures.concat(leagueTwoFixture.splice(0, 13 - counterAFterLeagueOne));\n      }\n\n      let fixturesToPush = [];\n\n      for (let i = 0; i < wantedFixtures.length; i++) {\n        fixturesToPush.splice(fixturesToPush.length, fixturesToPush.length + 1, {\n          leagueName: wantedFixtures[i].league.name,\n          fixture_id: wantedFixtures[i].fixture_id,\n          status: wantedFixtures[i].status,\n          homeTeam_id: wantedFixtures[i].homeTeam.team_id,\n          homeTeam: wantedFixtures[i].homeTeam.team_name,\n          awayTeam_id: wantedFixtures[i].awayTeam.team_id,\n          awayTeam: wantedFixtures[i].awayTeam.team_name,\n          event_date: wantedFixtures[i].event_date,\n          end_time: moment(dateTime).add(3, 'hours').format(\"YYYY-MM-DDTHH:mm:SS+00:00\")\n        });\n      }\n\n      if (fixturesToPush.length === 13) {\n        console.log(\"i got called here3\");\n        let boardRef = firebase.database().ref(\"board\").child(kickOffDate);\n        let data;\n        boardRef.on(\"value\", snapshot => {\n          data = snapshot.val();\n\n          if (!data) {\n            firebase.database().ref(\"board\").child(kickOffDate).update(fixturesToPush);\n            firebase.database().ref(\"board\").child(kickOffDate).update({\n              isPaid: false\n            });\n            firebase.database().ref(\"board\").child(kickOffDate).update({\n              dateKey: kickOffDate\n            });\n            firebase.database().ref(\"board\").off();\n            dispatch(setEventDate(fixturesToPush[0].event_date));\n            alert(\"board initialized\");\n          }\n        });\n        dispatch(setIsBoardSet(true));\n        firebase.database().ref(\"board\").off();\n      }\n    }).catch(error => {\n      alert(\"no games for this day\");\n    });\n  };\n};\nexport const fetchResults = numberOfGames => {\n  return dispatch => {\n    let matchRef = firebase.database().ref().child(\"match-results\").orderByChild('gameDay').limitToLast(numberOfGames);\n    matchRef.on('value', snapshot => {\n      const resultData = snapshot.val();\n      let finalResults = [];\n\n      let groupedGameResults = _.groupBy(resultData, 'gameDay');\n\n      let result = Object.keys(groupedGameResults).map(key => [key, groupedGameResults[key]]);\n      let newArr = [];\n\n      for (let i = result.length - 1; i >= 0; i--) {\n        newArr.push(result[i]);\n      }\n\n      newArr.forEach((arr, k) => {\n        let i = arr[1].sort((a, b) => a.fixtureId > b.fixtureId ? 1 : -1);\n        finalResults.splice(finalResults.length, finalResults.length + 1, i);\n      });\n      let resoultModified = finalResults;\n\n      if (finalResults.length > 0) {\n        dispatch(fetchWeeklyResults(resoultModified));\n        dispatch(stopResultInitialize());\n      } else {\n        alert(\"Content Not Found\");\n      }\n    });\n  };\n};\nexport const setCurrentResult = slipGame => {\n  return dispatch => {\n    slipGame.games.map(game => {\n      return axios.get(\"fixtures/id/\" + game.fixture_id).then(response => {\n        let resultFixture = response.data.api.fixtures[0];\n        let gameDay = moment(resultFixture.event_date).format(\"YYYY-MM-DD\") + \"T00:00:00+00:00\";\n        let returnResult = {\n          status: resultFixture.status,\n          fixtureId: resultFixture.fixture_id,\n          homeGoals: resultFixture.goalsHomeTeam,\n          awayGoals: resultFixture.goalsAwayTeam,\n          score: resultFixture.score.fulltime,\n          homeTeam: resultFixture.homeTeam.team_name,\n          awayTeam: resultFixture.awayTeam.team_name,\n          gameDate: resultFixture.event_date,\n          gameDay: gameDay\n        };\n        let userRef = firebase.database().ref('match-results/' + resultFixture.fixture_id);\n        userRef.on('value', snapshot => {\n          const resultData = snapshot.val();\n\n          if (resultData === null) {\n            firebase.database().ref('match-results/' + resultFixture.fixture_id).set({\n              returnResult\n            });\n          } else {\n            let updates = {};\n            updates['match-results/' + resultFixture.fixture_id] = returnResult;\n            firebase.database().ref().update(updates);\n          }\n        });\n      }).catch(err => {});\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Emma/Documents/GitHub/Emp/sports-lottery/src/store/actions/config.js"],"names":["axios","moment","actionTypes","_","firebase","setIsBoardSet","isBoardSet","type","SET_IS_BOARD_SET","stopResultInitialize","STOP_RESULT_INITIALIZE","fetchWeeklyResults","payload","FETCH_RESULTS","setEventDate","eventDate","SET_EVENTDATE","updateBoard","fixturesToPush","kickOffDate","dispatch","console","log","forEach","fixture","index","get","fixture_id","then","response","database","ref","child","update","status","data","api","fixtures","off","alert","configureBoard","isFaCup","kickOffTime","dateTime","fixtureAtTime","filter","event_date","EnglandFixtures","league","country","PremierShipOrFACup","name","Championship","countWanted","length","premCount","ChamCount","wantedFixtures","splice","concat","countAfter","leagueOneFixture","counterAFterLeagueOne","leagueTwoFixture","i","leagueName","homeTeam_id","homeTeam","team_id","team_name","awayTeam_id","awayTeam","end_time","add","format","boardRef","on","snapshot","val","isPaid","dateKey","catch","error","fetchResults","numberOfGames","matchRef","orderByChild","limitToLast","resultData","finalResults","groupedGameResults","groupBy","result","Object","keys","map","key","newArr","push","arr","k","sort","a","b","fixtureId","resoultModified","setCurrentResult","slipGame","games","game","resultFixture","gameDay","returnResult","homeGoals","goalsHomeTeam","awayGoals","goalsAwayTeam","score","fulltime","gameDate","userRef","set","updates","err"],"mappings":"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","sourcesContent":["\r\nimport axios from '../../axios-fixtures';\r\nimport moment from 'moment';\r\nimport * as  actionTypes from './actionTypes';\r\nimport _ from 'lodash';\r\nimport firebase from \"../../config/firebase/firebase\";\r\n\r\nexport const setIsBoardSet = (isBoardSet) => {\r\n    return {\r\n        type: actionTypes.SET_IS_BOARD_SET,\r\n        isBoardSet: isBoardSet\r\n    }\r\n}\r\nexport const stopResultInitialize = () => {\r\n    return {\r\n        type: actionTypes.STOP_RESULT_INITIALIZE,\r\n    };\r\n}\r\n\r\nexport const fetchWeeklyResults = (payload) => {\r\n    return {\r\n        type: actionTypes.FETCH_RESULTS,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const setEventDate = (eventDate) => {\r\n    return {\r\n        type: actionTypes.SET_EVENTDATE,\r\n        eventDate: eventDate\r\n    }\r\n}\r\nexport const updateBoard = (fixturesToPush, kickOffDate)=>{\r\n    return dispatch=> {\r\n        console.log(\"i got called here\");\r\n        fixturesToPush.forEach((fixture, index) => {\r\n            axios.get(\"fixtures/id/\" + fixture.fixture_id)\r\n                .then(response => {\r\n                    firebase.database().ref(\"board\").child(kickOffDate).child(index)\r\n                        .update({ status: response.data.api.fixtures[0].status });\r\n                    firebase.database().ref(\"board\").off();\r\n                });\r\n        })\r\n        firebase.database().ref(\"board\").off();\r\n       \r\n        alert(\"board updated\");\r\n        return null;\r\n    }\r\n}\r\nexport const configureBoard = (isFaCup, kickOffTime, kickOffDate) => {\r\n    return dispatch => {\r\n        console.log(kickOffDate);\r\n        axios.get(\"fixtures/date/\" + kickOffDate)\r\n            .then(response => {\r\n               \r\n                let dateTime = (kickOffDate + \"T\" + kickOffTime);\r\n                let fixtureAtTime = response.data.api.fixtures.filter(\r\n                    fixture => fixture.event_date === dateTime);\r\n                let EnglandFixtures = fixtureAtTime.filter(fixture => fixture.league.country === \"England\");\r\n\r\n                let PremierShipOrFACup;\r\n                if (!isFaCup) {\r\n                    PremierShipOrFACup = EnglandFixtures.filter(fixture => fixture.league.name === \"Premier League\");\r\n                } else {\r\n                    PremierShipOrFACup = EnglandFixtures.filter(fixture => fixture.league.name === \"FA Cup\");\r\n                }\r\n\r\n                let Championship = EnglandFixtures.filter(fixture => fixture.league.name === \"Championship\");\r\n                let countWanted;\r\n\r\n                if ((Championship.length + PremierShipOrFACup.length) < 13) {\r\n                    countWanted = Championship.length + PremierShipOrFACup.length;\r\n                }\r\n                else {\r\n                    countWanted = 13;\r\n                }\r\n\r\n                let premCount = 7;\r\n                let ChamCount = 6;\r\n                if (countWanted === 13) {\r\n                    if (Championship.length < 6)\r\n                        premCount = countWanted - Championship.length;\r\n                    if (PremierShipOrFACup.length < 7)\r\n                        ChamCount = countWanted - PremierShipOrFACup.length;\r\n                } else {\r\n                    if (Championship.length < 5)\r\n                        premCount = countWanted - Championship.length;\r\n                    if (PremierShipOrFACup < 6)\r\n                        ChamCount = countWanted - PremierShipOrFACup.length;\r\n                }\r\n                let wantedFixtures = PremierShipOrFACup.splice(0, premCount).concat(Championship.splice(0, ChamCount));\r\n                let countAfter = wantedFixtures.length;\r\n\r\n                if (wantedFixtures.length < 13) {\r\n                    let leagueOneFixture = EnglandFixtures.filter(fixture => fixture.league.name === \"League One\");\r\n                    wantedFixtures = wantedFixtures.concat(leagueOneFixture.splice(0, (13 - countAfter)));\r\n                }\r\n\r\n                let counterAFterLeagueOne = wantedFixtures.length;\r\n                if (wantedFixtures.length < 13) {\r\n                    let leagueTwoFixture = EnglandFixtures.filter(fixture => fixture.league.name === \"League Two\");\r\n                    wantedFixtures = wantedFixtures.concat(leagueTwoFixture.splice(0, (13 - counterAFterLeagueOne)));\r\n                }\r\n                let fixturesToPush = [];\r\n                for (let i = 0; i < wantedFixtures.length; i++) {\r\n                    fixturesToPush.splice(fixturesToPush.length, fixturesToPush.length + 1,\r\n                        {\r\n                            leagueName: wantedFixtures[i].league.name,\r\n                            fixture_id: wantedFixtures[i].fixture_id,\r\n                            status: wantedFixtures[i].status,\r\n                            homeTeam_id: wantedFixtures[i].homeTeam.team_id, homeTeam: wantedFixtures[i].homeTeam.team_name,\r\n                            awayTeam_id: wantedFixtures[i].awayTeam.team_id, awayTeam: wantedFixtures[i].awayTeam.team_name,\r\n                            event_date: wantedFixtures[i].event_date,\r\n                            end_time: moment(dateTime).add(3, 'hours').format(\"YYYY-MM-DDTHH:mm:SS+00:00\"),\r\n                        })\r\n                }\r\n                if (fixturesToPush.length === 13) {\r\n                    console.log(\"i got called here3\");\r\n                    let boardRef = firebase.database().ref(\"board\").child(kickOffDate);\r\n                    let data;\r\n                    boardRef.on(\"value\", snapshot => {\r\n                        data = snapshot.val();\r\n                        if (!data) {\r\n                            firebase.database().ref(\"board\").child(kickOffDate).update(fixturesToPush);\r\n                            firebase.database().ref(\"board\").child(kickOffDate).update({ isPaid: false });\r\n                            firebase.database().ref(\"board\").child(kickOffDate).update({ dateKey: kickOffDate });\r\n                            firebase.database().ref(\"board\").off();\r\n                            dispatch(setEventDate(fixturesToPush[0].event_date));\r\n                            alert(\"board initialized\");\r\n                        }\r\n                    })\r\n                    dispatch(setIsBoardSet(true));\r\n                    firebase.database().ref(\"board\").off();\r\n                }\r\n            }).catch(error => {\r\n                alert(\"no games for this day\");\r\n            });\r\n    };\r\n}\r\n\r\n\r\nexport const fetchResults = (numberOfGames) => {\r\n    return dispatch => {\r\n        let matchRef = firebase.database().ref().child(\"match-results\").orderByChild('gameDay')\r\n            .limitToLast(numberOfGames);\r\n        matchRef.on('value', (snapshot) => {\r\n            const resultData = snapshot.val();\r\n            let finalResults = [];\r\n            let groupedGameResults = _.groupBy(resultData, 'gameDay');\r\n            let result = Object.keys(groupedGameResults).map((key) => [key, groupedGameResults[key]]);\r\n\r\n            let newArr = [];\r\n            for (let i = result.length - 1; i >= 0; i--) {\r\n                newArr.push(result[i]);\r\n            }\r\n            newArr.forEach((arr, k) => {\r\n                let i = arr[1].sort((a, b) => a.fixtureId > b.fixtureId ? 1 : -1);\r\n                finalResults.splice(finalResults.length, finalResults.length + 1, i);\r\n\r\n            })\r\n            let resoultModified = finalResults\r\n\r\n            if (finalResults.length > 0) {\r\n                dispatch(fetchWeeklyResults(resoultModified));\r\n                dispatch(stopResultInitialize());\r\n            } else {\r\n                alert(\"Content Not Found\");\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\n\r\nexport const setCurrentResult = (slipGame) => {\r\n    return dispatch => {\r\n        slipGame.games.map(game => {\r\n            return axios.get(\"fixtures/id/\" + game.fixture_id)\r\n                .then(response => {\r\n                    let resultFixture = response.data.api.fixtures[0];\r\n                    let gameDay = moment(resultFixture.event_date).format(\"YYYY-MM-DD\") + \"T00:00:00+00:00\";\r\n                    let returnResult = {\r\n                        status: resultFixture.status,\r\n                        fixtureId: resultFixture.fixture_id,\r\n                        homeGoals: resultFixture.goalsHomeTeam,\r\n                        awayGoals: resultFixture.goalsAwayTeam,\r\n                        score: resultFixture.score.fulltime,\r\n                        homeTeam: resultFixture.homeTeam.team_name,\r\n                        awayTeam: resultFixture.awayTeam.team_name,\r\n                        gameDate: resultFixture.event_date,\r\n                        gameDay: gameDay\r\n                    };\r\n\r\n                    let userRef = firebase.database().ref('match-results/' + resultFixture.fixture_id);\r\n                    userRef.on('value', (snapshot) => {\r\n                        const resultData = snapshot.val();\r\n                        if (resultData === null) {\r\n                            firebase.database().ref('match-results/' + resultFixture.fixture_id).set({\r\n                                returnResult\r\n                            });\r\n                        } else {\r\n                            let updates = {};\r\n                            updates['match-results/' + resultFixture.fixture_id] = returnResult;\r\n                            firebase.database().ref().update(updates)\r\n                        }\r\n                    })\r\n\r\n\r\n                })\r\n                .catch(err => {\r\n\r\n                });\r\n\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}